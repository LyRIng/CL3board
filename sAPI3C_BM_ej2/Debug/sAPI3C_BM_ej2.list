
sAPI3C_BM_ej2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b30  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001cc8  08001cc8  00011cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001d38  08001d38  00011d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001d40  08001d40  00011d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001d44  08001d44  00011d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08001d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000c4  20000010  08001d58  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200000d4  08001d58  000200d4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010565  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002d43  00000000  00000000  000305a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0000ab92  00000000  00000000  000332e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000898  00000000  00000000  0003de80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001948  00000000  00000000  0003e718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001b547  00000000  00000000  00040060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00013731  00000000  00000000  0005b5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a69aa  00000000  00000000  0006ecd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00115682  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000018f4  00000000  00000000  001156d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001cb0 	.word	0x08001cb0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08001cb0 	.word	0x08001cb0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ec:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <HAL_Init+0x30>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004f6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004fe:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000506:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000508:	2003      	movs	r0, #3
 800050a:	f000 f82d 	bl	8000568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050e:	2000      	movs	r0, #0
 8000510:	f001 f808 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000514:	f000 ffea 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000518:	2000      	movs	r0, #0
 800051a:	bd08      	pop	{r3, pc}
 800051c:	40023c00 	.word	0x40023c00

08000520 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000520:	4a03      	ldr	r2, [pc, #12]	; (8000530 <HAL_IncTick+0x10>)
 8000522:	4b04      	ldr	r3, [pc, #16]	; (8000534 <HAL_IncTick+0x14>)
 8000524:	6811      	ldr	r1, [r2, #0]
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	440b      	add	r3, r1
 800052a:	6013      	str	r3, [r2, #0]
}
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	2000002c 	.word	0x2000002c
 8000534:	20000000 	.word	0x20000000

08000538 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000538:	4b01      	ldr	r3, [pc, #4]	; (8000540 <HAL_GetTick+0x8>)
 800053a:	6818      	ldr	r0, [r3, #0]
}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	2000002c 	.word	0x2000002c

08000544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000544:	b538      	push	{r3, r4, r5, lr}
 8000546:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000548:	f7ff fff6 	bl	8000538 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800054c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800054e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000550:	d002      	beq.n	8000558 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000552:	4b04      	ldr	r3, [pc, #16]	; (8000564 <HAL_Delay+0x20>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000558:	f7ff ffee 	bl	8000538 <HAL_GetTick>
 800055c:	1b43      	subs	r3, r0, r5
 800055e:	42a3      	cmp	r3, r4
 8000560:	d3fa      	bcc.n	8000558 <HAL_Delay+0x14>
  {
  }
}
 8000562:	bd38      	pop	{r3, r4, r5, pc}
 8000564:	20000000 	.word	0x20000000

08000568 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000568:	4907      	ldr	r1, [pc, #28]	; (8000588 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800056a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800056c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800056e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000572:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000576:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000578:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800057a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800057e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000582:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800058c:	4b1c      	ldr	r3, [pc, #112]	; (8000600 <HAL_NVIC_SetPriority+0x74>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000594:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000596:	f1c3 0e07 	rsb	lr, r3, #7
 800059a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800059e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a2:	bf28      	it	cs
 80005a4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a8:	f1bc 0f06 	cmp.w	ip, #6
 80005ac:	d91b      	bls.n	80005e6 <HAL_NVIC_SetPriority+0x5a>
 80005ae:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005b0:	f04f 3cff 	mov.w	ip, #4294967295
 80005b4:	fa0c fc03 	lsl.w	ip, ip, r3
 80005b8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005bc:	f04f 3cff 	mov.w	ip, #4294967295
 80005c0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80005c4:	ea21 010c 	bic.w	r1, r1, ip
 80005c8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80005ca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005cc:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80005d0:	db0c      	blt.n	80005ec <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80005d6:	0109      	lsls	r1, r1, #4
 80005d8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80005dc:	b2c9      	uxtb	r1, r1
 80005de:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80005e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80005e6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e8:	4613      	mov	r3, r2
 80005ea:	e7e7      	b.n	80005bc <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <HAL_NVIC_SetPriority+0x78>)
 80005ee:	f000 000f 	and.w	r0, r0, #15
 80005f2:	0109      	lsls	r1, r1, #4
 80005f4:	4403      	add	r3, r0
 80005f6:	b2c9      	uxtb	r1, r1
 80005f8:	7619      	strb	r1, [r3, #24]
 80005fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80005fe:	bf00      	nop
 8000600:	e000ed00 	.word	0xe000ed00
 8000604:	e000ecfc 	.word	0xe000ecfc

08000608 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000608:	2800      	cmp	r0, #0
 800060a:	db08      	blt.n	800061e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060c:	0941      	lsrs	r1, r0, #5
 800060e:	4a04      	ldr	r2, [pc, #16]	; (8000620 <HAL_NVIC_EnableIRQ+0x18>)
 8000610:	f000 001f 	and.w	r0, r0, #31
 8000614:	2301      	movs	r3, #1
 8000616:	fa03 f000 	lsl.w	r0, r3, r0
 800061a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800061e:	4770      	bx	lr
 8000620:	e000e100 	.word	0xe000e100

08000624 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000624:	2800      	cmp	r0, #0
 8000626:	f000 8168 	beq.w	80008fa <HAL_RCC_OscConfig+0x2d6>
{
 800062a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800062e:	6803      	ldr	r3, [r0, #0]
 8000630:	07dd      	lsls	r5, r3, #31
{
 8000632:	b082      	sub	sp, #8
 8000634:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000636:	d52f      	bpl.n	8000698 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000638:	499e      	ldr	r1, [pc, #632]	; (80008b4 <HAL_RCC_OscConfig+0x290>)
 800063a:	688a      	ldr	r2, [r1, #8]
 800063c:	f002 020c 	and.w	r2, r2, #12
 8000640:	2a04      	cmp	r2, #4
 8000642:	f000 80ed 	beq.w	8000820 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000646:	688a      	ldr	r2, [r1, #8]
 8000648:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800064c:	2a08      	cmp	r2, #8
 800064e:	f000 80e3 	beq.w	8000818 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000652:	6863      	ldr	r3, [r4, #4]
 8000654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000658:	f000 80ec 	beq.w	8000834 <HAL_RCC_OscConfig+0x210>
 800065c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000660:	f000 814d 	beq.w	80008fe <HAL_RCC_OscConfig+0x2da>
 8000664:	4d93      	ldr	r5, [pc, #588]	; (80008b4 <HAL_RCC_OscConfig+0x290>)
 8000666:	682a      	ldr	r2, [r5, #0]
 8000668:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800066c:	602a      	str	r2, [r5, #0]
 800066e:	682a      	ldr	r2, [r5, #0]
 8000670:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000674:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000676:	2b00      	cmp	r3, #0
 8000678:	f040 80e1 	bne.w	800083e <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800067c:	f7ff ff5c 	bl	8000538 <HAL_GetTick>
 8000680:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000682:	e005      	b.n	8000690 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000684:	f7ff ff58 	bl	8000538 <HAL_GetTick>
 8000688:	1b80      	subs	r0, r0, r6
 800068a:	2864      	cmp	r0, #100	; 0x64
 800068c:	f200 8101 	bhi.w	8000892 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000690:	682b      	ldr	r3, [r5, #0]
 8000692:	039b      	lsls	r3, r3, #14
 8000694:	d4f6      	bmi.n	8000684 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000696:	6823      	ldr	r3, [r4, #0]
 8000698:	079f      	lsls	r7, r3, #30
 800069a:	d528      	bpl.n	80006ee <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800069c:	4a85      	ldr	r2, [pc, #532]	; (80008b4 <HAL_RCC_OscConfig+0x290>)
 800069e:	6891      	ldr	r1, [r2, #8]
 80006a0:	f011 0f0c 	tst.w	r1, #12
 80006a4:	f000 809a 	beq.w	80007dc <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80006a8:	6891      	ldr	r1, [r2, #8]
 80006aa:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80006ae:	2908      	cmp	r1, #8
 80006b0:	f000 8090 	beq.w	80007d4 <HAL_RCC_OscConfig+0x1b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80006b4:	68e3      	ldr	r3, [r4, #12]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	f000 810e 	beq.w	80008d8 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80006bc:	4b7e      	ldr	r3, [pc, #504]	; (80008b8 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006be:	4e7d      	ldr	r6, [pc, #500]	; (80008b4 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 80006c0:	2201      	movs	r2, #1
 80006c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006c4:	f7ff ff38 	bl	8000538 <HAL_GetTick>
 80006c8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006ca:	e005      	b.n	80006d8 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006cc:	f7ff ff34 	bl	8000538 <HAL_GetTick>
 80006d0:	1b40      	subs	r0, r0, r5
 80006d2:	2802      	cmp	r0, #2
 80006d4:	f200 80dd 	bhi.w	8000892 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006d8:	6833      	ldr	r3, [r6, #0]
 80006da:	0798      	lsls	r0, r3, #30
 80006dc:	d5f6      	bpl.n	80006cc <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006de:	6833      	ldr	r3, [r6, #0]
 80006e0:	6922      	ldr	r2, [r4, #16]
 80006e2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006e6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80006ea:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006ec:	6823      	ldr	r3, [r4, #0]
 80006ee:	071a      	lsls	r2, r3, #28
 80006f0:	d45b      	bmi.n	80007aa <HAL_RCC_OscConfig+0x186>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80006f2:	0758      	lsls	r0, r3, #29
 80006f4:	d53a      	bpl.n	800076c <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006f6:	4a6f      	ldr	r2, [pc, #444]	; (80008b4 <HAL_RCC_OscConfig+0x290>)
 80006f8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80006fa:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80006fe:	f040 8089 	bne.w	8000814 <HAL_RCC_OscConfig+0x1f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800070e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000712:	9301      	str	r3, [sp, #4]
 8000714:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000716:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000718:	4e68      	ldr	r6, [pc, #416]	; (80008bc <HAL_RCC_OscConfig+0x298>)
 800071a:	6833      	ldr	r3, [r6, #0]
 800071c:	05d9      	lsls	r1, r3, #23
 800071e:	f140 80a8 	bpl.w	8000872 <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000722:	68a3      	ldr	r3, [r4, #8]
 8000724:	2b01      	cmp	r3, #1
 8000726:	f000 80b8 	beq.w	800089a <HAL_RCC_OscConfig+0x276>
 800072a:	2b05      	cmp	r3, #5
 800072c:	f000 8123 	beq.w	8000976 <HAL_RCC_OscConfig+0x352>
 8000730:	4e60      	ldr	r6, [pc, #384]	; (80008b4 <HAL_RCC_OscConfig+0x290>)
 8000732:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8000734:	f022 0201 	bic.w	r2, r2, #1
 8000738:	6732      	str	r2, [r6, #112]	; 0x70
 800073a:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800073c:	f022 0204 	bic.w	r2, r2, #4
 8000740:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 80ae 	bne.w	80008a4 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000748:	f7ff fef6 	bl	8000538 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800074c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000750:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000752:	e005      	b.n	8000760 <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000754:	f7ff fef0 	bl	8000538 <HAL_GetTick>
 8000758:	1bc0      	subs	r0, r0, r7
 800075a:	4540      	cmp	r0, r8
 800075c:	f200 8099 	bhi.w	8000892 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000760:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000762:	0798      	lsls	r0, r3, #30
 8000764:	d4f6      	bmi.n	8000754 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000766:	2d00      	cmp	r5, #0
 8000768:	f040 80d3 	bne.w	8000912 <HAL_RCC_OscConfig+0x2ee>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800076c:	69a3      	ldr	r3, [r4, #24]
 800076e:	b1c3      	cbz	r3, 80007a2 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000770:	4d50      	ldr	r5, [pc, #320]	; (80008b4 <HAL_RCC_OscConfig+0x290>)
 8000772:	68aa      	ldr	r2, [r5, #8]
 8000774:	f002 020c 	and.w	r2, r2, #12
 8000778:	2a08      	cmp	r2, #8
 800077a:	d036      	beq.n	80007ea <HAL_RCC_OscConfig+0x1c6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800077c:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800077e:	4b4e      	ldr	r3, [pc, #312]	; (80008b8 <HAL_RCC_OscConfig+0x294>)
 8000780:	f04f 0200 	mov.w	r2, #0
 8000784:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000786:	f000 80ca 	beq.w	800091e <HAL_RCC_OscConfig+0x2fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800078a:	f7ff fed5 	bl	8000538 <HAL_GetTick>
 800078e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000790:	e004      	b.n	800079c <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000792:	f7ff fed1 	bl	8000538 <HAL_GetTick>
 8000796:	1b00      	subs	r0, r0, r4
 8000798:	2802      	cmp	r0, #2
 800079a:	d87a      	bhi.n	8000892 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800079c:	682b      	ldr	r3, [r5, #0]
 800079e:	019b      	lsls	r3, r3, #6
 80007a0:	d4f7      	bmi.n	8000792 <HAL_RCC_OscConfig+0x16e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80007a2:	2000      	movs	r0, #0
}
 80007a4:	b002      	add	sp, #8
 80007a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80007aa:	6963      	ldr	r3, [r4, #20]
 80007ac:	b30b      	cbz	r3, 80007f2 <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_LSI_ENABLE();
 80007ae:	4b42      	ldr	r3, [pc, #264]	; (80008b8 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007b0:	4e40      	ldr	r6, [pc, #256]	; (80008b4 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 80007b2:	2201      	movs	r2, #1
 80007b4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80007b8:	f7ff febe 	bl	8000538 <HAL_GetTick>
 80007bc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007be:	e004      	b.n	80007ca <HAL_RCC_OscConfig+0x1a6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007c0:	f7ff feba 	bl	8000538 <HAL_GetTick>
 80007c4:	1b40      	subs	r0, r0, r5
 80007c6:	2802      	cmp	r0, #2
 80007c8:	d863      	bhi.n	8000892 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007ca:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80007cc:	079b      	lsls	r3, r3, #30
 80007ce:	d5f7      	bpl.n	80007c0 <HAL_RCC_OscConfig+0x19c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	e78e      	b.n	80006f2 <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80007d4:	6852      	ldr	r2, [r2, #4]
 80007d6:	0256      	lsls	r6, r2, #9
 80007d8:	f53f af6c 	bmi.w	80006b4 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007dc:	4a35      	ldr	r2, [pc, #212]	; (80008b4 <HAL_RCC_OscConfig+0x290>)
 80007de:	6812      	ldr	r2, [r2, #0]
 80007e0:	0795      	lsls	r5, r2, #30
 80007e2:	d53a      	bpl.n	800085a <HAL_RCC_OscConfig+0x236>
 80007e4:	68e2      	ldr	r2, [r4, #12]
 80007e6:	2a01      	cmp	r2, #1
 80007e8:	d037      	beq.n	800085a <HAL_RCC_OscConfig+0x236>
    return HAL_ERROR;
 80007ea:	2001      	movs	r0, #1
}
 80007ec:	b002      	add	sp, #8
 80007ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 80007f2:	4a31      	ldr	r2, [pc, #196]	; (80008b8 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80007f4:	4e2f      	ldr	r6, [pc, #188]	; (80008b4 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 80007f6:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80007fa:	f7ff fe9d 	bl	8000538 <HAL_GetTick>
 80007fe:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000800:	e004      	b.n	800080c <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000802:	f7ff fe99 	bl	8000538 <HAL_GetTick>
 8000806:	1b40      	subs	r0, r0, r5
 8000808:	2802      	cmp	r0, #2
 800080a:	d842      	bhi.n	8000892 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800080c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800080e:	079f      	lsls	r7, r3, #30
 8000810:	d4f7      	bmi.n	8000802 <HAL_RCC_OscConfig+0x1de>
 8000812:	e7dd      	b.n	80007d0 <HAL_RCC_OscConfig+0x1ac>
    FlagStatus       pwrclkchanged = RESET;
 8000814:	2500      	movs	r5, #0
 8000816:	e77f      	b.n	8000718 <HAL_RCC_OscConfig+0xf4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000818:	684a      	ldr	r2, [r1, #4]
 800081a:	0250      	lsls	r0, r2, #9
 800081c:	f57f af19 	bpl.w	8000652 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000820:	4a24      	ldr	r2, [pc, #144]	; (80008b4 <HAL_RCC_OscConfig+0x290>)
 8000822:	6812      	ldr	r2, [r2, #0]
 8000824:	0391      	lsls	r1, r2, #14
 8000826:	f57f af37 	bpl.w	8000698 <HAL_RCC_OscConfig+0x74>
 800082a:	6862      	ldr	r2, [r4, #4]
 800082c:	2a00      	cmp	r2, #0
 800082e:	f47f af33 	bne.w	8000698 <HAL_RCC_OscConfig+0x74>
 8000832:	e7da      	b.n	80007ea <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000834:	4a1f      	ldr	r2, [pc, #124]	; (80008b4 <HAL_RCC_OscConfig+0x290>)
 8000836:	6813      	ldr	r3, [r2, #0]
 8000838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800083c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800083e:	f7ff fe7b 	bl	8000538 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000842:	4e1c      	ldr	r6, [pc, #112]	; (80008b4 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8000844:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000846:	e004      	b.n	8000852 <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000848:	f7ff fe76 	bl	8000538 <HAL_GetTick>
 800084c:	1b40      	subs	r0, r0, r5
 800084e:	2864      	cmp	r0, #100	; 0x64
 8000850:	d81f      	bhi.n	8000892 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000852:	6833      	ldr	r3, [r6, #0]
 8000854:	039a      	lsls	r2, r3, #14
 8000856:	d5f7      	bpl.n	8000848 <HAL_RCC_OscConfig+0x224>
 8000858:	e71d      	b.n	8000696 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800085a:	4916      	ldr	r1, [pc, #88]	; (80008b4 <HAL_RCC_OscConfig+0x290>)
 800085c:	6920      	ldr	r0, [r4, #16]
 800085e:	680a      	ldr	r2, [r1, #0]
 8000860:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000864:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8000868:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800086a:	071a      	lsls	r2, r3, #28
 800086c:	f57f af41 	bpl.w	80006f2 <HAL_RCC_OscConfig+0xce>
 8000870:	e79b      	b.n	80007aa <HAL_RCC_OscConfig+0x186>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000872:	6833      	ldr	r3, [r6, #0]
 8000874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000878:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800087a:	f7ff fe5d 	bl	8000538 <HAL_GetTick>
 800087e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000880:	6833      	ldr	r3, [r6, #0]
 8000882:	05da      	lsls	r2, r3, #23
 8000884:	f53f af4d 	bmi.w	8000722 <HAL_RCC_OscConfig+0xfe>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000888:	f7ff fe56 	bl	8000538 <HAL_GetTick>
 800088c:	1bc0      	subs	r0, r0, r7
 800088e:	2802      	cmp	r0, #2
 8000890:	d9f6      	bls.n	8000880 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8000892:	2003      	movs	r0, #3
}
 8000894:	b002      	add	sp, #8
 8000896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800089a:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <HAL_RCC_OscConfig+0x290>)
 800089c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80008a4:	f7ff fe48 	bl	8000538 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008a8:	4f02      	ldr	r7, [pc, #8]	; (80008b4 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 80008aa:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008ac:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008b0:	e00b      	b.n	80008ca <HAL_RCC_OscConfig+0x2a6>
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800
 80008b8:	42470000 	.word	0x42470000
 80008bc:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008c0:	f7ff fe3a 	bl	8000538 <HAL_GetTick>
 80008c4:	1b80      	subs	r0, r0, r6
 80008c6:	4540      	cmp	r0, r8
 80008c8:	d8e3      	bhi.n	8000892 <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80008cc:	079b      	lsls	r3, r3, #30
 80008ce:	d5f7      	bpl.n	80008c0 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	f43f af4b 	beq.w	800076c <HAL_RCC_OscConfig+0x148>
 80008d6:	e01c      	b.n	8000912 <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_HSI_DISABLE();
 80008d8:	4a2c      	ldr	r2, [pc, #176]	; (800098c <HAL_RCC_OscConfig+0x368>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008da:	4e2d      	ldr	r6, [pc, #180]	; (8000990 <HAL_RCC_OscConfig+0x36c>)
        __HAL_RCC_HSI_DISABLE();
 80008dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80008de:	f7ff fe2b 	bl	8000538 <HAL_GetTick>
 80008e2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008e4:	e004      	b.n	80008f0 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008e6:	f7ff fe27 	bl	8000538 <HAL_GetTick>
 80008ea:	1b40      	subs	r0, r0, r5
 80008ec:	2802      	cmp	r0, #2
 80008ee:	d8d0      	bhi.n	8000892 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008f0:	6833      	ldr	r3, [r6, #0]
 80008f2:	0799      	lsls	r1, r3, #30
 80008f4:	d4f7      	bmi.n	80008e6 <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	e6f9      	b.n	80006ee <HAL_RCC_OscConfig+0xca>
    return HAL_ERROR;
 80008fa:	2001      	movs	r0, #1
}
 80008fc:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008fe:	4b24      	ldr	r3, [pc, #144]	; (8000990 <HAL_RCC_OscConfig+0x36c>)
 8000900:	681a      	ldr	r2, [r3, #0]
 8000902:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800090e:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000910:	e795      	b.n	800083e <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000912:	4a1f      	ldr	r2, [pc, #124]	; (8000990 <HAL_RCC_OscConfig+0x36c>)
 8000914:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800091a:	6413      	str	r3, [r2, #64]	; 0x40
 800091c:	e726      	b.n	800076c <HAL_RCC_OscConfig+0x148>
        tickstart = HAL_GetTick();
 800091e:	f7ff fe0b 	bl	8000538 <HAL_GetTick>
 8000922:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000924:	e004      	b.n	8000930 <HAL_RCC_OscConfig+0x30c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000926:	f7ff fe07 	bl	8000538 <HAL_GetTick>
 800092a:	1b80      	subs	r0, r0, r6
 800092c:	2802      	cmp	r0, #2
 800092e:	d8b0      	bhi.n	8000892 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000930:	682b      	ldr	r3, [r5, #0]
 8000932:	0199      	lsls	r1, r3, #6
 8000934:	d4f7      	bmi.n	8000926 <HAL_RCC_OscConfig+0x302>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000936:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800093a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800093c:	430b      	orrs	r3, r1
 800093e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000942:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8000946:	0852      	lsrs	r2, r2, #1
 8000948:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800094c:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 800094e:	490f      	ldr	r1, [pc, #60]	; (800098c <HAL_RCC_OscConfig+0x368>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000950:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8000954:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000956:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000958:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800095a:	f7ff fded 	bl	8000538 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800095e:	4d0c      	ldr	r5, [pc, #48]	; (8000990 <HAL_RCC_OscConfig+0x36c>)
        tickstart = HAL_GetTick();
 8000960:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000962:	e004      	b.n	800096e <HAL_RCC_OscConfig+0x34a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000964:	f7ff fde8 	bl	8000538 <HAL_GetTick>
 8000968:	1b00      	subs	r0, r0, r4
 800096a:	2802      	cmp	r0, #2
 800096c:	d891      	bhi.n	8000892 <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800096e:	682b      	ldr	r3, [r5, #0]
 8000970:	019a      	lsls	r2, r3, #6
 8000972:	d5f7      	bpl.n	8000964 <HAL_RCC_OscConfig+0x340>
 8000974:	e715      	b.n	80007a2 <HAL_RCC_OscConfig+0x17e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_RCC_OscConfig+0x36c>)
 8000978:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800097a:	f042 0204 	orr.w	r2, r2, #4
 800097e:	671a      	str	r2, [r3, #112]	; 0x70
 8000980:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000982:	f042 0201 	orr.w	r2, r2, #1
 8000986:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000988:	e78c      	b.n	80008a4 <HAL_RCC_OscConfig+0x280>
 800098a:	bf00      	nop
 800098c:	42470000 	.word	0x42470000
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000994:	4916      	ldr	r1, [pc, #88]	; (80009f0 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8000996:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000998:	688b      	ldr	r3, [r1, #8]
 800099a:	f003 030c 	and.w	r3, r3, #12
 800099e:	2b04      	cmp	r3, #4
 80009a0:	d01b      	beq.n	80009da <HAL_RCC_GetSysClockFreq+0x46>
 80009a2:	2b08      	cmp	r3, #8
 80009a4:	d117      	bne.n	80009d6 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009a6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009a8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009aa:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009ac:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80009b0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80009b4:	d113      	bne.n	80009de <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009b6:	480f      	ldr	r0, [pc, #60]	; (80009f4 <HAL_RCC_GetSysClockFreq+0x60>)
 80009b8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80009bc:	fba1 0100 	umull	r0, r1, r1, r0
 80009c0:	f7ff fc12 	bl	80001e8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_RCC_GetSysClockFreq+0x5c>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80009cc:	3301      	adds	r3, #1
 80009ce:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80009d0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009d4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80009d6:	4807      	ldr	r0, [pc, #28]	; (80009f4 <HAL_RCC_GetSysClockFreq+0x60>)
}
 80009d8:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80009da:	4807      	ldr	r0, [pc, #28]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80009dc:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x64>)
 80009e0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80009e4:	2300      	movs	r3, #0
 80009e6:	fba1 0100 	umull	r0, r1, r1, r0
 80009ea:	f7ff fbfd 	bl	80001e8 <__aeabi_uldivmod>
 80009ee:	e7e9      	b.n	80009c4 <HAL_RCC_GetSysClockFreq+0x30>
 80009f0:	40023800 	.word	0x40023800
 80009f4:	00f42400 	.word	0x00f42400
 80009f8:	007a1200 	.word	0x007a1200

080009fc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80009fc:	2800      	cmp	r0, #0
 80009fe:	f000 8086 	beq.w	8000b0e <HAL_RCC_ClockConfig+0x112>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a02:	4a47      	ldr	r2, [pc, #284]	; (8000b20 <HAL_RCC_ClockConfig+0x124>)
 8000a04:	6813      	ldr	r3, [r2, #0]
 8000a06:	f003 030f 	and.w	r3, r3, #15
 8000a0a:	428b      	cmp	r3, r1
{
 8000a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a10:	460d      	mov	r5, r1
 8000a12:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a14:	d209      	bcs.n	8000a2a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a16:	b2cb      	uxtb	r3, r1
 8000a18:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a1a:	6813      	ldr	r3, [r2, #0]
 8000a1c:	f003 030f 	and.w	r3, r3, #15
 8000a20:	428b      	cmp	r3, r1
 8000a22:	d002      	beq.n	8000a2a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8000a24:	2001      	movs	r0, #1
}
 8000a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a2a:	6823      	ldr	r3, [r4, #0]
 8000a2c:	0798      	lsls	r0, r3, #30
 8000a2e:	d514      	bpl.n	8000a5a <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a30:	0759      	lsls	r1, r3, #29
 8000a32:	d504      	bpl.n	8000a3e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000a34:	493b      	ldr	r1, [pc, #236]	; (8000b24 <HAL_RCC_ClockConfig+0x128>)
 8000a36:	688a      	ldr	r2, [r1, #8]
 8000a38:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8000a3c:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a3e:	071a      	lsls	r2, r3, #28
 8000a40:	d504      	bpl.n	8000a4c <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000a42:	4938      	ldr	r1, [pc, #224]	; (8000b24 <HAL_RCC_ClockConfig+0x128>)
 8000a44:	688a      	ldr	r2, [r1, #8]
 8000a46:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8000a4a:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a4c:	4935      	ldr	r1, [pc, #212]	; (8000b24 <HAL_RCC_ClockConfig+0x128>)
 8000a4e:	68a0      	ldr	r0, [r4, #8]
 8000a50:	688a      	ldr	r2, [r1, #8]
 8000a52:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000a56:	4302      	orrs	r2, r0
 8000a58:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a5a:	07df      	lsls	r7, r3, #31
 8000a5c:	d521      	bpl.n	8000aa2 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a5e:	6862      	ldr	r2, [r4, #4]
 8000a60:	2a01      	cmp	r2, #1
 8000a62:	d056      	beq.n	8000b12 <HAL_RCC_ClockConfig+0x116>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000a64:	1e93      	subs	r3, r2, #2
 8000a66:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a68:	4b2e      	ldr	r3, [pc, #184]	; (8000b24 <HAL_RCC_ClockConfig+0x128>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000a6c:	d94c      	bls.n	8000b08 <HAL_RCC_ClockConfig+0x10c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a6e:	0799      	lsls	r1, r3, #30
 8000a70:	d5d8      	bpl.n	8000a24 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a72:	4e2c      	ldr	r6, [pc, #176]	; (8000b24 <HAL_RCC_ClockConfig+0x128>)
 8000a74:	68b3      	ldr	r3, [r6, #8]
 8000a76:	f023 0303 	bic.w	r3, r3, #3
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000a7e:	f7ff fd5b 	bl	8000538 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a82:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000a86:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000a88:	e004      	b.n	8000a94 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a8a:	f7ff fd55 	bl	8000538 <HAL_GetTick>
 8000a8e:	1bc0      	subs	r0, r0, r7
 8000a90:	4540      	cmp	r0, r8
 8000a92:	d843      	bhi.n	8000b1c <HAL_RCC_ClockConfig+0x120>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000a94:	68b3      	ldr	r3, [r6, #8]
 8000a96:	6862      	ldr	r2, [r4, #4]
 8000a98:	f003 030c 	and.w	r3, r3, #12
 8000a9c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000aa0:	d1f3      	bne.n	8000a8a <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000aa2:	4a1f      	ldr	r2, [pc, #124]	; (8000b20 <HAL_RCC_ClockConfig+0x124>)
 8000aa4:	6813      	ldr	r3, [r2, #0]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	42ab      	cmp	r3, r5
 8000aac:	d906      	bls.n	8000abc <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000aae:	b2eb      	uxtb	r3, r5
 8000ab0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ab2:	6813      	ldr	r3, [r2, #0]
 8000ab4:	f003 030f 	and.w	r3, r3, #15
 8000ab8:	42ab      	cmp	r3, r5
 8000aba:	d1b3      	bne.n	8000a24 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000abc:	6823      	ldr	r3, [r4, #0]
 8000abe:	075a      	lsls	r2, r3, #29
 8000ac0:	d506      	bpl.n	8000ad0 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ac2:	4918      	ldr	r1, [pc, #96]	; (8000b24 <HAL_RCC_ClockConfig+0x128>)
 8000ac4:	68e0      	ldr	r0, [r4, #12]
 8000ac6:	688a      	ldr	r2, [r1, #8]
 8000ac8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8000acc:	4302      	orrs	r2, r0
 8000ace:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ad0:	071b      	lsls	r3, r3, #28
 8000ad2:	d507      	bpl.n	8000ae4 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ad4:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <HAL_RCC_ClockConfig+0x128>)
 8000ad6:	6921      	ldr	r1, [r4, #16]
 8000ad8:	6893      	ldr	r3, [r2, #8]
 8000ada:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000ade:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ae2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ae4:	f7ff ff56 	bl	8000994 <HAL_RCC_GetSysClockFreq>
 8000ae8:	4a0e      	ldr	r2, [pc, #56]	; (8000b24 <HAL_RCC_ClockConfig+0x128>)
 8000aea:	4c0f      	ldr	r4, [pc, #60]	; (8000b28 <HAL_RCC_ClockConfig+0x12c>)
 8000aec:	6892      	ldr	r2, [r2, #8]
 8000aee:	490f      	ldr	r1, [pc, #60]	; (8000b2c <HAL_RCC_ClockConfig+0x130>)
 8000af0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8000af4:	4603      	mov	r3, r0
 8000af6:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000af8:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000afa:	40d3      	lsrs	r3, r2
 8000afc:	600b      	str	r3, [r1, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000afe:	f000 fd11 	bl	8001524 <HAL_InitTick>
  return HAL_OK;
 8000b02:	2000      	movs	r0, #0
}
 8000b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b08:	0198      	lsls	r0, r3, #6
 8000b0a:	d4b2      	bmi.n	8000a72 <HAL_RCC_ClockConfig+0x76>
 8000b0c:	e78a      	b.n	8000a24 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8000b0e:	2001      	movs	r0, #1
}
 8000b10:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <HAL_RCC_ClockConfig+0x128>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	039e      	lsls	r6, r3, #14
 8000b18:	d4ab      	bmi.n	8000a72 <HAL_RCC_ClockConfig+0x76>
 8000b1a:	e783      	b.n	8000a24 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	e782      	b.n	8000a26 <HAL_RCC_ClockConfig+0x2a>
 8000b20:	40023c00 	.word	0x40023c00
 8000b24:	40023800 	.word	0x40023800
 8000b28:	08001cc8 	.word	0x08001cc8
 8000b2c:	2000000c 	.word	0x2000000c

08000b30 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8000b32:	4905      	ldr	r1, [pc, #20]	; (8000b48 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000b38:	6808      	ldr	r0, [r1, #0]
 8000b3a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000b3e:	5cd3      	ldrb	r3, [r2, r3]
}
 8000b40:	40d8      	lsrs	r0, r3
 8000b42:	4770      	bx	lr
 8000b44:	40023800 	.word	0x40023800
 8000b48:	2000000c 	.word	0x2000000c
 8000b4c:	08001cd8 	.word	0x08001cd8

08000b50 <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b52:	220f      	movs	r2, #15
 8000b54:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	f002 0203 	and.w	r2, r2, #3
 8000b5c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000b64:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000b66:	689a      	ldr	r2, [r3, #8]
 8000b68:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000b6c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	08db      	lsrs	r3, r3, #3
{
 8000b72:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000b74:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000b78:	4c05      	ldr	r4, [pc, #20]	; (8000b90 <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000b7a:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000b7c:	6823      	ldr	r3, [r4, #0]
}
 8000b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	600b      	str	r3, [r1, #0]
}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40023c00 	.word	0x40023c00

08000b94 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000b94:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8000b96:	6803      	ldr	r3, [r0, #0]
 8000b98:	f013 0f05 	tst.w	r3, #5
{
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8000ba0:	d10e      	bne.n	8000bc0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000ba2:	0798      	lsls	r0, r3, #30
 8000ba4:	d447      	bmi.n	8000c36 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000ba6:	f013 0308 	ands.w	r3, r3, #8
 8000baa:	d102      	bne.n	8000bb2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8000bac:	4618      	mov	r0, r3
}
 8000bae:	b003      	add	sp, #12
 8000bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8000bb2:	4b4a      	ldr	r3, [pc, #296]	; (8000cdc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8000bb4:	7d22      	ldrb	r2, [r4, #20]
 8000bb6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
  return HAL_OK;
 8000bba:	2000      	movs	r0, #0
}
 8000bbc:	b003      	add	sp, #12
 8000bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8000bc0:	4b47      	ldr	r3, [pc, #284]	; (8000ce0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000bc2:	4e48      	ldr	r6, [pc, #288]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
    __HAL_RCC_PLLI2S_DISABLE();
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8000bc8:	f7ff fcb6 	bl	8000538 <HAL_GetTick>
 8000bcc:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000bce:	e004      	b.n	8000bda <HAL_RCCEx_PeriphCLKConfig+0x46>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000bd0:	f7ff fcb2 	bl	8000538 <HAL_GetTick>
 8000bd4:	1b43      	subs	r3, r0, r5
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d82a      	bhi.n	8000c30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8000bda:	6833      	ldr	r3, [r6, #0]
 8000bdc:	011b      	lsls	r3, r3, #4
 8000bde:	d4f7      	bmi.n	8000bd0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8000be0:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8000be4:	6862      	ldr	r2, [r4, #4]
 8000be6:	071b      	lsls	r3, r3, #28
 8000be8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8000bec:	4313      	orrs	r3, r2
    __HAL_RCC_PLLI2S_ENABLE();
 8000bee:	4a3c      	ldr	r2, [pc, #240]	; (8000ce0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8000bf0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	6691      	str	r1, [r2, #104]	; 0x68
    tickstart = HAL_GetTick();
 8000bf8:	f7ff fc9e 	bl	8000538 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000bfc:	4e39      	ldr	r6, [pc, #228]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
    tickstart = HAL_GetTick();
 8000bfe:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000c00:	e004      	b.n	8000c0c <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8000c02:	f7ff fc99 	bl	8000538 <HAL_GetTick>
 8000c06:	1b40      	subs	r0, r0, r5
 8000c08:	2802      	cmp	r0, #2
 8000c0a:	d811      	bhi.n	8000c30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8000c0c:	6833      	ldr	r3, [r6, #0]
 8000c0e:	011f      	lsls	r7, r3, #4
 8000c10:	d5f7      	bpl.n	8000c02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	e7c5      	b.n	8000ba2 <HAL_RCCEx_PeriphCLKConfig+0xe>
        tickstart = HAL_GetTick();
 8000c16:	f7ff fc8f 	bl	8000538 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c1a:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000c1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c20:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c22:	079b      	lsls	r3, r3, #30
 8000c24:	d43c      	bmi.n	8000ca0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c26:	f7ff fc87 	bl	8000538 <HAL_GetTick>
 8000c2a:	1b80      	subs	r0, r0, r6
 8000c2c:	42b8      	cmp	r0, r7
 8000c2e:	d9f7      	bls.n	8000c20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        return HAL_TIMEOUT;
 8000c30:	2003      	movs	r0, #3
}
 8000c32:	b003      	add	sp, #12
 8000c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
    PWR->CR |= PWR_CR_DBP;
 8000c38:	4d2b      	ldr	r5, [pc, #172]	; (8000ce8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	9201      	str	r2, [sp, #4]
 8000c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c44:	641a      	str	r2, [r3, #64]	; 0x40
 8000c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	9301      	str	r3, [sp, #4]
 8000c4e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8000c50:	682b      	ldr	r3, [r5, #0]
 8000c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c56:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8000c58:	f7ff fc6e 	bl	8000538 <HAL_GetTick>
 8000c5c:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000c5e:	e004      	b.n	8000c6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000c60:	f7ff fc6a 	bl	8000538 <HAL_GetTick>
 8000c64:	1b83      	subs	r3, r0, r6
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d8e2      	bhi.n	8000c30 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000c6a:	682b      	ldr	r3, [r5, #0]
 8000c6c:	05d9      	lsls	r1, r3, #23
 8000c6e:	d5f7      	bpl.n	8000c60 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c70:	4d1c      	ldr	r5, [pc, #112]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c72:	6923      	ldr	r3, [r4, #16]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c74:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c76:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8000c7a:	d012      	beq.n	8000ca2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8000c7c:	f403 7140 	and.w	r1, r3, #768	; 0x300
 8000c80:	4291      	cmp	r1, r2
 8000c82:	d010      	beq.n	8000ca6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c84:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8000c86:	4a16      	ldr	r2, [pc, #88]	; (8000ce0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000c92:	2100      	movs	r1, #0
 8000c94:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8000c98:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8000c9a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000c9c:	07da      	lsls	r2, r3, #31
 8000c9e:	d4ba      	bmi.n	8000c16 <HAL_RCCEx_PeriphCLKConfig+0x82>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000ca0:	6923      	ldr	r3, [r4, #16]
 8000ca2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8000ca6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8000caa:	d00c      	beq.n	8000cc6 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8000cac:	490d      	ldr	r1, [pc, #52]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000cae:	688a      	ldr	r2, [r1, #8]
 8000cb0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8000cb4:	608a      	str	r2, [r1, #8]
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000cb8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8000cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cbe:	430b      	orrs	r3, r1
 8000cc0:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8000cc2:	6823      	ldr	r3, [r4, #0]
 8000cc4:	e76f      	b.n	8000ba6 <HAL_RCCEx_PeriphCLKConfig+0x12>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000cc6:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000cc8:	6882      	ldr	r2, [r0, #8]
 8000cca:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8000cce:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8000cd2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	6082      	str	r2, [r0, #8]
 8000cda:	e7ec      	b.n	8000cb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8000cdc:	42471000 	.word	0x42471000
 8000ce0:	42470000 	.word	0x42470000
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	40007000 	.word	0x40007000

08000cec <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d064      	beq.n	8000dbe <HAL_TIM_Base_Init+0xce>
{
 8000cf4:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8000cf6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d043      	beq.n	8000d8c <HAL_TIM_Base_Init+0x9c>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000d04:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d06:	492f      	ldr	r1, [pc, #188]	; (8000dc4 <HAL_TIM_Base_Init+0xd4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d0e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8000d10:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d12:	d040      	beq.n	8000d96 <HAL_TIM_Base_Init+0xa6>
 8000d14:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8000d18:	d021      	beq.n	8000d5e <HAL_TIM_Base_Init+0x6e>
 8000d1a:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8000d1e:	428a      	cmp	r2, r1
 8000d20:	d01d      	beq.n	8000d5e <HAL_TIM_Base_Init+0x6e>
 8000d22:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000d26:	428a      	cmp	r2, r1
 8000d28:	d019      	beq.n	8000d5e <HAL_TIM_Base_Init+0x6e>
 8000d2a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000d2e:	428a      	cmp	r2, r1
 8000d30:	d015      	beq.n	8000d5e <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d32:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8000d36:	428a      	cmp	r2, r1
 8000d38:	d015      	beq.n	8000d66 <HAL_TIM_Base_Init+0x76>
 8000d3a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000d3e:	428a      	cmp	r2, r1
 8000d40:	d011      	beq.n	8000d66 <HAL_TIM_Base_Init+0x76>
 8000d42:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8000d46:	428a      	cmp	r2, r1
 8000d48:	d00d      	beq.n	8000d66 <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000d4a:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d4c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d52:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8000d54:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000d56:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d58:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8000d5a:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000d5c:	e010      	b.n	8000d80 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8000d5e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000d64:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d66:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000d68:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d6e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000d70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d74:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000d76:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8000d78:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8000d7a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d7c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8000d7e:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000d80:	2301      	movs	r3, #1
 8000d82:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8000d84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000d88:	2000      	movs	r0, #0
}
 8000d8a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8000d8c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000d90:	f7ff ffac 	bl	8000cec <HAL_TIM_Base_MspInit>
 8000d94:	e7b6      	b.n	8000d04 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8000d96:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d98:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000d9e:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8000da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000da4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000da6:	69a1      	ldr	r1, [r4, #24]
 8000da8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dac:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8000dae:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000db0:	68e3      	ldr	r3, [r4, #12]
 8000db2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8000db4:	6863      	ldr	r3, [r4, #4]
 8000db6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8000db8:	6963      	ldr	r3, [r4, #20]
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbc:	e7e0      	b.n	8000d80 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8000dbe:	2001      	movs	r0, #1
}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40010000 	.word	0x40010000

08000dc8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000dc8:	6803      	ldr	r3, [r0, #0]
 8000dca:	68da      	ldr	r2, [r3, #12]
 8000dcc:	f042 0201 	orr.w	r2, r2, #1
 8000dd0:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000dd8:	2a06      	cmp	r2, #6
 8000dda:	d003      	beq.n	8000de4 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	f042 0201 	orr.w	r2, r2, #1
 8000de2:	601a      	str	r2, [r3, #0]
}
 8000de4:	2000      	movs	r0, #0
 8000de6:	4770      	bx	lr

08000de8 <HAL_TIM_OC_DelayElapsedCallback>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <HAL_TIM_IC_CaptureCallback>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <HAL_TIM_TriggerCallback>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000df8:	6803      	ldr	r3, [r0, #0]
 8000dfa:	691a      	ldr	r2, [r3, #16]
 8000dfc:	0791      	lsls	r1, r2, #30
{
 8000dfe:	b510      	push	{r4, lr}
 8000e00:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e02:	d502      	bpl.n	8000e0a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	0792      	lsls	r2, r2, #30
 8000e08:	d45f      	bmi.n	8000eca <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000e0a:	691a      	ldr	r2, [r3, #16]
 8000e0c:	0750      	lsls	r0, r2, #29
 8000e0e:	d502      	bpl.n	8000e16 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000e10:	68da      	ldr	r2, [r3, #12]
 8000e12:	0751      	lsls	r1, r2, #29
 8000e14:	d446      	bmi.n	8000ea4 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000e16:	691a      	ldr	r2, [r3, #16]
 8000e18:	0712      	lsls	r2, r2, #28
 8000e1a:	d502      	bpl.n	8000e22 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000e1c:	68da      	ldr	r2, [r3, #12]
 8000e1e:	0710      	lsls	r0, r2, #28
 8000e20:	d42e      	bmi.n	8000e80 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	06d2      	lsls	r2, r2, #27
 8000e26:	d502      	bpl.n	8000e2e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	06d0      	lsls	r0, r2, #27
 8000e2c:	d418      	bmi.n	8000e60 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000e2e:	691a      	ldr	r2, [r3, #16]
 8000e30:	07d1      	lsls	r1, r2, #31
 8000e32:	d502      	bpl.n	8000e3a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	07d2      	lsls	r2, r2, #31
 8000e38:	d45d      	bmi.n	8000ef6 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000e3a:	691a      	ldr	r2, [r3, #16]
 8000e3c:	0610      	lsls	r0, r2, #24
 8000e3e:	d502      	bpl.n	8000e46 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	0611      	lsls	r1, r2, #24
 8000e44:	d45f      	bmi.n	8000f06 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000e46:	691a      	ldr	r2, [r3, #16]
 8000e48:	0652      	lsls	r2, r2, #25
 8000e4a:	d502      	bpl.n	8000e52 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	0650      	lsls	r0, r2, #25
 8000e50:	d461      	bmi.n	8000f16 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	0691      	lsls	r1, r2, #26
 8000e56:	d502      	bpl.n	8000e5e <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000e58:	68da      	ldr	r2, [r3, #12]
 8000e5a:	0692      	lsls	r2, r2, #26
 8000e5c:	d443      	bmi.n	8000ee6 <HAL_TIM_IRQHandler+0xee>
}
 8000e5e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000e60:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e64:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000e66:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e68:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e6a:	69db      	ldr	r3, [r3, #28]
 8000e6c:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000e70:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e72:	d064      	beq.n	8000f3e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e74:	f7ff ffba 	bl	8000dec <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e78:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000e7a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e7c:	7722      	strb	r2, [r4, #28]
 8000e7e:	e7d6      	b.n	8000e2e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000e80:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e84:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000e86:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e88:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e8a:	69db      	ldr	r3, [r3, #28]
 8000e8c:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8000e8e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e90:	d152      	bne.n	8000f38 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e92:	f7ff ffa9 	bl	8000de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e96:	4620      	mov	r0, r4
 8000e98:	f7ff ffaa 	bl	8000df0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e9c:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000e9e:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ea0:	7722      	strb	r2, [r4, #28]
 8000ea2:	e7be      	b.n	8000e22 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000ea4:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000ea8:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000eaa:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000eac:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8000eb4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000eb6:	d13c      	bne.n	8000f32 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000eb8:	f7ff ff96 	bl	8000de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f7ff ff97 	bl	8000df0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ec2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000ec4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ec6:	7722      	strb	r2, [r4, #28]
 8000ec8:	e7a5      	b.n	8000e16 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000eca:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ece:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000ed0:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ed2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	079b      	lsls	r3, r3, #30
 8000ed8:	d025      	beq.n	8000f26 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8000eda:	f7ff ff87 	bl	8000dec <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ede:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000ee0:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ee2:	7722      	strb	r2, [r4, #28]
 8000ee4:	e791      	b.n	8000e0a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000ee6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8000eea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000eec:	611a      	str	r2, [r3, #16]
}
 8000eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8000ef2:	f000 b82b 	b.w	8000f4c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000ef6:	f06f 0201 	mvn.w	r2, #1
 8000efa:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000efc:	4620      	mov	r0, r4
 8000efe:	f000 faeb 	bl	80014d8 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000f02:	6823      	ldr	r3, [r4, #0]
 8000f04:	e799      	b.n	8000e3a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000f06:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000f0a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	f000 f81f 	bl	8000f50 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000f12:	6823      	ldr	r3, [r4, #0]
 8000f14:	e797      	b.n	8000e46 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000f16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000f1a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f7ff ff69 	bl	8000df4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000f22:	6823      	ldr	r3, [r4, #0]
 8000f24:	e795      	b.n	8000e52 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f26:	f7ff ff5f 	bl	8000de8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f7ff ff60 	bl	8000df0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f30:	e7d5      	b.n	8000ede <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f32:	f7ff ff5b 	bl	8000dec <HAL_TIM_IC_CaptureCallback>
 8000f36:	e7c4      	b.n	8000ec2 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f38:	f7ff ff58 	bl	8000dec <HAL_TIM_IC_CaptureCallback>
 8000f3c:	e7ae      	b.n	8000e9c <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f3e:	f7ff ff53 	bl	8000de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f42:	4620      	mov	r0, r4
 8000f44:	f7ff ff54 	bl	8000df0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f48:	e796      	b.n	8000e78 <HAL_TIM_IRQHandler+0x80>
 8000f4a:	bf00      	nop

08000f4c <HAL_TIMEx_CommutCallback>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <HAL_TIMEx_BreakCallback>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000f54:	b410      	push	{r4}
 8000f56:	4603      	mov	r3, r0
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000f58:	7900      	ldrb	r0, [r0, #4]
 8000f5a:	b1a8      	cbz	r0, 8000f88 <LL_EXTI_Init+0x34>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	b180      	cbz	r0, 8000f82 <LL_EXTI_Init+0x2e>
    {
      switch (EXTI_InitStruct->Mode)
 8000f60:	795a      	ldrb	r2, [r3, #5]
 8000f62:	2a01      	cmp	r2, #1
 8000f64:	d02f      	beq.n	8000fc6 <LL_EXTI_Init+0x72>
 8000f66:	2a02      	cmp	r2, #2
 8000f68:	d01b      	beq.n	8000fa2 <LL_EXTI_Init+0x4e>
 8000f6a:	b31a      	cbz	r2, 8000fb4 <LL_EXTI_Init+0x60>
 8000f6c:	2201      	movs	r2, #1
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000f6e:	799b      	ldrb	r3, [r3, #6]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d03a      	beq.n	8000fea <LL_EXTI_Init+0x96>
      {
        switch (EXTI_InitStruct->Trigger)
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d030      	beq.n	8000fda <LL_EXTI_Init+0x86>
 8000f78:	2b03      	cmp	r3, #3
 8000f7a:	d044      	beq.n	8001006 <LL_EXTI_Init+0xb2>
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d038      	beq.n	8000ff2 <LL_EXTI_Init+0x9e>
 8000f80:	2001      	movs	r0, #1
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
  }
  return status;
}
 8000f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f86:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000f88:	4a21      	ldr	r2, [pc, #132]	; (8001010 <LL_EXTI_Init+0xbc>)
 8000f8a:	681c      	ldr	r4, [r3, #0]
 8000f8c:	6811      	ldr	r1, [r2, #0]
 8000f8e:	ea21 0104 	bic.w	r1, r1, r4
 8000f92:	6011      	str	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000f94:	6853      	ldr	r3, [r2, #4]
 8000f96:	ea23 0304 	bic.w	r3, r3, r4
 8000f9a:	6053      	str	r3, [r2, #4]
 8000f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fa0:	4770      	bx	lr
  SET_BIT(EXTI->IMR, ExtiLine);
 8000fa2:	491b      	ldr	r1, [pc, #108]	; (8001010 <LL_EXTI_Init+0xbc>)
 8000fa4:	680c      	ldr	r4, [r1, #0]
 8000fa6:	4304      	orrs	r4, r0
 8000fa8:	600c      	str	r4, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000faa:	684c      	ldr	r4, [r1, #4]
 8000fac:	4304      	orrs	r4, r0
}
 8000fae:	2200      	movs	r2, #0
  SET_BIT(EXTI->EMR, ExtiLine);
 8000fb0:	604c      	str	r4, [r1, #4]
}
 8000fb2:	e7dc      	b.n	8000f6e <LL_EXTI_Init+0x1a>
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8000fb4:	4916      	ldr	r1, [pc, #88]	; (8001010 <LL_EXTI_Init+0xbc>)
 8000fb6:	684c      	ldr	r4, [r1, #4]
 8000fb8:	ea24 0400 	bic.w	r4, r4, r0
 8000fbc:	604c      	str	r4, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000fbe:	680c      	ldr	r4, [r1, #0]
 8000fc0:	4304      	orrs	r4, r0
 8000fc2:	600c      	str	r4, [r1, #0]
}
 8000fc4:	e7d3      	b.n	8000f6e <LL_EXTI_Init+0x1a>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000fc6:	4912      	ldr	r1, [pc, #72]	; (8001010 <LL_EXTI_Init+0xbc>)
 8000fc8:	680c      	ldr	r4, [r1, #0]
 8000fca:	ea24 0400 	bic.w	r4, r4, r0
 8000fce:	600c      	str	r4, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8000fd0:	684c      	ldr	r4, [r1, #4]
 8000fd2:	4304      	orrs	r4, r0
}
 8000fd4:	2200      	movs	r2, #0
  SET_BIT(EXTI->EMR, ExtiLine);
 8000fd6:	604c      	str	r4, [r1, #4]
}
 8000fd8:	e7c9      	b.n	8000f6e <LL_EXTI_Init+0x1a>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <LL_EXTI_Init+0xbc>)
 8000fdc:	6899      	ldr	r1, [r3, #8]
 8000fde:	ea21 0100 	bic.w	r1, r1, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000fe2:	6099      	str	r1, [r3, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000fe4:	68d9      	ldr	r1, [r3, #12]
 8000fe6:	4308      	orrs	r0, r1
 8000fe8:	60d8      	str	r0, [r3, #12]
}
 8000fea:	4610      	mov	r0, r2
 8000fec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ff0:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <LL_EXTI_Init+0xbc>)
 8000ff4:	68d9      	ldr	r1, [r3, #12]
 8000ff6:	ea21 0100 	bic.w	r1, r1, r0
 8000ffa:	60d9      	str	r1, [r3, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000ffc:	6899      	ldr	r1, [r3, #8]
 8000ffe:	4308      	orrs	r0, r1
 8001000:	6098      	str	r0, [r3, #8]
}
 8001002:	4610      	mov	r0, r2
 8001004:	e7bd      	b.n	8000f82 <LL_EXTI_Init+0x2e>
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001006:	4b02      	ldr	r3, [pc, #8]	; (8001010 <LL_EXTI_Init+0xbc>)
 8001008:	6899      	ldr	r1, [r3, #8]
 800100a:	4301      	orrs	r1, r0
 800100c:	e7e9      	b.n	8000fe2 <LL_EXTI_Init+0x8e>
 800100e:	bf00      	nop
 8001010:	40013c00 	.word	0x40013c00

08001014 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001018:	680c      	ldr	r4, [r1, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101a:	fa94 f2a4 	rbit	r2, r4
 800101e:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001022:	fa34 f302 	lsrs.w	r3, r4, r2
 8001026:	f000 80a8 	beq.w	800117a <LL_GPIO_Init+0x166>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800102a:	684d      	ldr	r5, [r1, #4]
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800102c:	f04f 0e01 	mov.w	lr, #1
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001030:	1e6e      	subs	r6, r5, #1
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001032:	f04f 0c03 	mov.w	ip, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001036:	f04f 0b0f 	mov.w	fp, #15
 800103a:	e003      	b.n	8001044 <LL_GPIO_Init+0x30>
    pinpos++;
 800103c:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800103e:	fa34 f302 	lsrs.w	r3, r4, r2
 8001042:	d075      	beq.n	8001130 <LL_GPIO_Init+0x11c>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8001044:	fa0e f302 	lsl.w	r3, lr, r2
    if (currentpin)
 8001048:	4023      	ands	r3, r4
 800104a:	d0f7      	beq.n	800103c <LL_GPIO_Init+0x28>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800104c:	f8d0 a000 	ldr.w	sl, [r0]
 8001050:	fa93 f9a3 	rbit	r9, r3
 8001054:	fab9 f989 	clz	r9, r9
 8001058:	fa93 f8a3 	rbit	r8, r3
 800105c:	fab8 f888 	clz	r8, r8
 8001060:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8001064:	fa0c f909 	lsl.w	r9, ip, r9
 8001068:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800106c:	ea2a 0a09 	bic.w	sl, sl, r9
 8001070:	fa05 f808 	lsl.w	r8, r5, r8
 8001074:	ea4a 0a08 	orr.w	sl, sl, r8
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001078:	2e01      	cmp	r6, #1
 800107a:	f8c0 a000 	str.w	sl, [r0]
 800107e:	d818      	bhi.n	80010b2 <LL_GPIO_Init+0x9e>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001080:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8001084:	fa93 f8a3 	rbit	r8, r3
 8001088:	fab8 f888 	clz	r8, r8
 800108c:	fa93 f9a3 	rbit	r9, r3
 8001090:	688f      	ldr	r7, [r1, #8]
 8001092:	fab9 f989 	clz	r9, r9
 8001096:	ea4f 0848 	mov.w	r8, r8, lsl #1
 800109a:	fa0c f808 	lsl.w	r8, ip, r8
 800109e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80010a2:	ea2a 0808 	bic.w	r8, sl, r8
 80010a6:	fa07 f909 	lsl.w	r9, r7, r9
 80010aa:	ea48 0809 	orr.w	r8, r8, r9
 80010ae:	f8c0 8008 	str.w	r8, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80010b2:	f8d0 900c 	ldr.w	r9, [r0, #12]
 80010b6:	fa93 f8a3 	rbit	r8, r3
 80010ba:	fab8 f888 	clz	r8, r8
 80010be:	fa93 faa3 	rbit	sl, r3
 80010c2:	690f      	ldr	r7, [r1, #16]
 80010c4:	faba fa8a 	clz	sl, sl
 80010c8:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80010cc:	fa0c f808 	lsl.w	r8, ip, r8
 80010d0:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80010d4:	ea29 0908 	bic.w	r9, r9, r8
 80010d8:	fa07 fa0a 	lsl.w	sl, r7, sl
 80010dc:	ea49 090a 	orr.w	r9, r9, sl
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80010e0:	2d02      	cmp	r5, #2
 80010e2:	f8c0 900c 	str.w	r9, [r0, #12]
 80010e6:	d1a9      	bne.n	800103c <LL_GPIO_Init+0x28>
 80010e8:	fa93 f8a3 	rbit	r8, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80010ec:	fab8 f888 	clz	r8, r8
 80010f0:	f1b8 0f07 	cmp.w	r8, #7
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80010f4:	ea4f 2913 	mov.w	r9, r3, lsr #8
 80010f8:	dc27      	bgt.n	800114a <LL_GPIO_Init+0x136>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80010fa:	f8d0 9020 	ldr.w	r9, [r0, #32]
 80010fe:	fa93 f8a3 	rbit	r8, r3
 8001102:	fab8 f888 	clz	r8, r8
 8001106:	fa93 f3a3 	rbit	r3, r3
 800110a:	694f      	ldr	r7, [r1, #20]
 800110c:	fab3 f383 	clz	r3, r3
 8001110:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8001114:	fa0b f808 	lsl.w	r8, fp, r8
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	ea29 0808 	bic.w	r8, r9, r8
 800111e:	fa07 f303 	lsl.w	r3, r7, r3
 8001122:	ea48 0303 	orr.w	r3, r8, r3
    pinpos++;
 8001126:	3201      	adds	r2, #1
 8001128:	6203      	str	r3, [r0, #32]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800112a:	fa34 f302 	lsrs.w	r3, r4, r2
 800112e:	d189      	bne.n	8001044 <LL_GPIO_Init+0x30>
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001130:	2e01      	cmp	r6, #1
 8001132:	d807      	bhi.n	8001144 <LL_GPIO_Init+0x130>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001134:	6843      	ldr	r3, [r0, #4]
 8001136:	68ca      	ldr	r2, [r1, #12]
 8001138:	ea23 0304 	bic.w	r3, r3, r4
 800113c:	fb02 f404 	mul.w	r4, r2, r4
 8001140:	431c      	orrs	r4, r3
 8001142:	6044      	str	r4, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8001144:	2000      	movs	r0, #0
 8001146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800114a:	f8d0 8024 	ldr.w	r8, [r0, #36]	; 0x24
 800114e:	fa99 f3a9 	rbit	r3, r9
 8001152:	fab3 f383 	clz	r3, r3
 8001156:	fa99 f9a9 	rbit	r9, r9
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	fa0b f303 	lsl.w	r3, fp, r3
 8001160:	ea28 0803 	bic.w	r8, r8, r3
 8001164:	fab9 f989 	clz	r9, r9
 8001168:	694b      	ldr	r3, [r1, #20]
 800116a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800116e:	fa03 f309 	lsl.w	r3, r3, r9
 8001172:	ea48 0303 	orr.w	r3, r8, r3
 8001176:	6243      	str	r3, [r0, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001178:	e760      	b.n	800103c <LL_GPIO_Init+0x28>
  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800117a:	684e      	ldr	r6, [r1, #4]
 800117c:	3e01      	subs	r6, #1
 800117e:	e7d7      	b.n	8001130 <LL_GPIO_Init+0x11c>

08001180 <LL_RCC_GetSystemClocksFreq>:
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001180:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <LL_RCC_GetSystemClocksFreq+0x80>)
 8001182:	6893      	ldr	r3, [r2, #8]
 8001184:	f003 030c 	and.w	r3, r3, #12
uint32_t RCC_GetSystemClockFreq(void)
{
  uint32_t frequency = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001188:	2b04      	cmp	r3, #4
{
 800118a:	b410      	push	{r4}
  switch (LL_RCC_GetSysClkSource())
 800118c:	d035      	beq.n	80011fa <LL_RCC_GetSystemClocksFreq+0x7a>
 800118e:	2b08      	cmp	r3, #8
 8001190:	d131      	bne.n	80011f6 <LL_RCC_GetSystemClocksFreq+0x76>
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001192:	6851      	ldr	r1, [r2, #4]
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
      break;

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001194:	4c1b      	ldr	r4, [pc, #108]	; (8001204 <LL_RCC_GetSystemClocksFreq+0x84>)
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <LL_RCC_GetSystemClocksFreq+0x88>)
 8001198:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800119c:	6851      	ldr	r1, [r2, #4]
 800119e:	bf18      	it	ne
 80011a0:	4623      	movne	r3, r4
 80011a2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      break;
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80011a6:	fbb3 f3f1 	udiv	r3, r3, r1
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80011aa:	6851      	ldr	r1, [r2, #4]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80011ac:	6852      	ldr	r2, [r2, #4]
 80011ae:	f3c2 4201 	ubfx	r2, r2, #16, #2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80011b2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80011b6:	3201      	adds	r2, #1
 80011b8:	fb01 f303 	mul.w	r3, r1, r3
 80011bc:	0052      	lsls	r2, r2, #1
 80011be:	fbb3 f3f2 	udiv	r3, r3, r2
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80011c2:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <LL_RCC_GetSystemClocksFreq+0x80>)
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80011c4:	6003      	str	r3, [r0, #0]
 80011c6:	6891      	ldr	r1, [r2, #8]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80011c8:	4c10      	ldr	r4, [pc, #64]	; (800120c <LL_RCC_GetSystemClocksFreq+0x8c>)
 80011ca:	f3c1 1103 	ubfx	r1, r1, #4, #4
 80011ce:	5c61      	ldrb	r1, [r4, r1]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80011d0:	4c0f      	ldr	r4, [pc, #60]	; (8001210 <LL_RCC_GetSystemClocksFreq+0x90>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80011d2:	40cb      	lsrs	r3, r1
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80011d4:	6043      	str	r3, [r0, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80011d6:	6891      	ldr	r1, [r2, #8]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80011d8:	f3c1 2182 	ubfx	r1, r1, #10, #3
 80011dc:	5c61      	ldrb	r1, [r4, r1]
 80011de:	fa23 f101 	lsr.w	r1, r3, r1
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80011e2:	6081      	str	r1, [r0, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80011e4:	6892      	ldr	r2, [r2, #8]
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80011e6:	f3c2 3242 	ubfx	r2, r2, #13, #3
 80011ea:	5ca2      	ldrb	r2, [r4, r2]
}
 80011ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80011f0:	40d3      	lsrs	r3, r2
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80011f2:	60c3      	str	r3, [r0, #12]
}
 80011f4:	4770      	bx	lr
      frequency = HSI_VALUE;
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <LL_RCC_GetSystemClocksFreq+0x88>)
 80011f8:	e7e3      	b.n	80011c2 <LL_RCC_GetSystemClocksFreq+0x42>
  switch (LL_RCC_GetSysClkSource())
 80011fa:	4b02      	ldr	r3, [pc, #8]	; (8001204 <LL_RCC_GetSystemClocksFreq+0x84>)
 80011fc:	e7e1      	b.n	80011c2 <LL_RCC_GetSystemClocksFreq+0x42>
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	007a1200 	.word	0x007a1200
 8001208:	00f42400 	.word	0x00f42400
 800120c:	08001cc8 	.word	0x08001cc8
 8001210:	08001cd8 	.word	0x08001cd8

08001214 <LL_USART_Init>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001214:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001216:	049b      	lsls	r3, r3, #18
 8001218:	d501      	bpl.n	800121e <LL_USART_Init+0xa>
  ErrorStatus status = ERROR;
 800121a:	2001      	movs	r0, #1
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 800121c:	4770      	bx	lr
{
 800121e:	b530      	push	{r4, r5, lr}
    MODIFY_REG(USARTx->CR1,
 8001220:	684b      	ldr	r3, [r1, #4]
 8001222:	68c2      	ldr	r2, [r0, #12]
 8001224:	460d      	mov	r5, r1
 8001226:	68c9      	ldr	r1, [r1, #12]
 8001228:	430b      	orrs	r3, r1
 800122a:	6929      	ldr	r1, [r5, #16]
 800122c:	430b      	orrs	r3, r1
 800122e:	69a9      	ldr	r1, [r5, #24]
 8001230:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8001234:	f022 020c 	bic.w	r2, r2, #12
 8001238:	430b      	orrs	r3, r1
 800123a:	4313      	orrs	r3, r2
 800123c:	60c3      	str	r3, [r0, #12]
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800123e:	6903      	ldr	r3, [r0, #16]
 8001240:	68aa      	ldr	r2, [r5, #8]
 8001242:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001246:	4313      	orrs	r3, r2
 8001248:	6103      	str	r3, [r0, #16]
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800124a:	6943      	ldr	r3, [r0, #20]
 800124c:	696a      	ldr	r2, [r5, #20]
 800124e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001252:	4313      	orrs	r3, r2
{
 8001254:	b085      	sub	sp, #20
 8001256:	6143      	str	r3, [r0, #20]
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8001258:	4604      	mov	r4, r0
 800125a:	4668      	mov	r0, sp
 800125c:	f7ff ff90 	bl	8001180 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <LL_USART_Init+0xec>)
 8001262:	429c      	cmp	r4, r3
 8001264:	d02b      	beq.n	80012be <LL_USART_Init+0xaa>
    else if (USARTx == USART2)
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <LL_USART_Init+0xf0>)
 8001268:	429c      	cmp	r4, r3
 800126a:	d005      	beq.n	8001278 <LL_USART_Init+0x64>
    else if (USARTx == USART6)
 800126c:	4b26      	ldr	r3, [pc, #152]	; (8001308 <LL_USART_Init+0xf4>)
 800126e:	429c      	cmp	r4, r3
 8001270:	d025      	beq.n	80012be <LL_USART_Init+0xaa>
  ErrorStatus status = ERROR;
 8001272:	2001      	movs	r0, #1
}
 8001274:	b005      	add	sp, #20
 8001276:	bd30      	pop	{r4, r5, pc}
      periphclk = rcc_clocks.PCLK1_Frequency;
 8001278:	9b02      	ldr	r3, [sp, #8]
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f9      	beq.n	8001272 <LL_USART_Init+0x5e>
        && (USART_InitStruct->BaudRate != 0U))
 800127e:	682a      	ldr	r2, [r5, #0]
 8001280:	2a00      	cmp	r2, #0
 8001282:	d0f6      	beq.n	8001272 <LL_USART_Init+0x5e>
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001284:	69a9      	ldr	r1, [r5, #24]
 8001286:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800128a:	d01a      	beq.n	80012c2 <LL_USART_Init+0xae>
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800128c:	491f      	ldr	r1, [pc, #124]	; (800130c <LL_USART_Init+0xf8>)
 800128e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001298:	fbb3 f3f2 	udiv	r3, r3, r2
 800129c:	fba1 0203 	umull	r0, r2, r1, r3
 80012a0:	0952      	lsrs	r2, r2, #5
 80012a2:	2064      	movs	r0, #100	; 0x64
 80012a4:	fb00 3312 	mls	r3, r0, r2, r3
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	3332      	adds	r3, #50	; 0x32
 80012ac:	fba1 1303 	umull	r1, r3, r1, r3
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 80012ba:	2000      	movs	r0, #0
 80012bc:	e7da      	b.n	8001274 <LL_USART_Init+0x60>
      periphclk = rcc_clocks.PCLK2_Frequency;
 80012be:	9b03      	ldr	r3, [sp, #12]
 80012c0:	e7db      	b.n	800127a <LL_USART_Init+0x66>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80012c2:	4812      	ldr	r0, [pc, #72]	; (800130c <LL_USART_Init+0xf8>)
 80012c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012c8:	0052      	lsls	r2, r2, #1
 80012ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80012d2:	fba0 1203 	umull	r1, r2, r0, r3
 80012d6:	0951      	lsrs	r1, r2, #5
 80012d8:	2264      	movs	r2, #100	; 0x64
 80012da:	fb02 3311 	mls	r3, r2, r1, r3
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	3332      	adds	r3, #50	; 0x32
 80012e2:	fba0 2303 	umull	r2, r3, r0, r3
 80012e6:	f3c3 1242 	ubfx	r2, r3, #5, #3
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80012f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80012f4:	4413      	add	r3, r2
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	60a3      	str	r3, [r4, #8]
      status = SUCCESS;
 80012fa:	2000      	movs	r0, #0
 80012fc:	e7ba      	b.n	8001274 <LL_USART_Init+0x60>
 80012fe:	bf00      	nop
 8001300:	40011000 	.word	0x40011000
 8001304:	40004400 	.word	0x40004400
 8001308:	40011400 	.word	0x40011400
 800130c:	51eb851f 	.word	0x51eb851f

08001310 <main>:
/**
  * @brief  main() - The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b508      	push	{r3, lr}
  boardInitCL3();
  
  // CL3 Terminal @UART 6, 115200 configuration
  uartConfig(UART_TER, BAUD_115200);
  
  sprintf(usr_msg,"\r\n CL3 Basic operations - Test Ex2 R.Oliva 2022 \r\n");
 8001312:	4d1e      	ldr	r5, [pc, #120]	; (800138c <main+0x7c>)
 8001314:	4c1e      	ldr	r4, [pc, #120]	; (8001390 <main+0x80>)
 8001316:	4e1f      	ldr	r6, [pc, #124]	; (8001394 <main+0x84>)
  boardInitCL3();
 8001318:	f000 f89a 	bl	8001450 <boardInitCL3>
  uartConfig(UART_TER, BAUD_115200);
 800131c:	2103      	movs	r1, #3
 800131e:	2000      	movs	r0, #0
 8001320:	f000 fb86 	bl	8001a30 <uartInit>
  sprintf(usr_msg,"\r\n CL3 Basic operations - Test Ex2 R.Oliva 2022 \r\n");
 8001324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	f824 3b02 	strh.w	r3, [r4], #2
 8001336:	4620      	mov	r0, r4
 8001338:	0c1a      	lsrs	r2, r3, #16
 800133a:	f800 2932 	strb.w	r2, [r0], #-50
  printmsg_cl3(usr_msg); 
 800133e:	f000 fc49 	bl	8001bd4 <printmsg_cl3>
  
  while (1)
  {
    valor = !gpioRead(KBD_ABJ);
 8001342:	2000      	movs	r0, #0
 8001344:	f000 fab8 	bl	80018b8 <gpioRead>
 8001348:	2800      	cmp	r0, #0
 800134a:	bf0c      	ite	eq
 800134c:	2301      	moveq	r3, #1
 800134e:	2300      	movne	r3, #0
	if(valor) {
		sprintf(usr_msg,"\r\n F3 Key pressed");
 8001350:	4d11      	ldr	r5, [pc, #68]	; (8001398 <main+0x88>)
 8001352:	4c0f      	ldr	r4, [pc, #60]	; (8001390 <main+0x80>)
    valor = !gpioRead(KBD_ABJ);
 8001354:	7033      	strb	r3, [r6, #0]
	if(valor) {
 8001356:	d107      	bne.n	8001368 <main+0x58>
		sprintf(usr_msg,"\r\n F3 Key pressed");
 8001358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135c:	4620      	mov	r0, r4
 800135e:	682b      	ldr	r3, [r5, #0]
 8001360:	f820 3910 	strh.w	r3, [r0], #-16
        printmsg_cl3(usr_msg); 
 8001364:	f000 fc36 	bl	8001bd4 <printmsg_cl3>
	}
	delay_cl3(500);
 8001368:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800136c:	f000 f816 	bl	800139c <delay_cl3>
    gpioWrite(OLED_PB2, ON);
 8001370:	2101      	movs	r1, #1
 8001372:	2002      	movs	r0, #2
 8001374:	f000 facc 	bl	8001910 <gpioWrite>
    delay_cl3(500);
 8001378:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800137c:	f000 f80e 	bl	800139c <delay_cl3>
    gpioWrite(OLED_PB2, OFF);
 8001380:	2100      	movs	r1, #0
 8001382:	2002      	movs	r0, #2
 8001384:	f000 fac4 	bl	8001910 <gpioWrite>
    valor = !gpioRead(KBD_ABJ);
 8001388:	e7db      	b.n	8001342 <main+0x32>
 800138a:	bf00      	nop
 800138c:	08001cf0 	.word	0x08001cf0
 8001390:	20000030 	.word	0x20000030
 8001394:	20000008 	.word	0x20000008
 8001398:	08001d24 	.word	0x08001d24

0800139c <delay_cl3>:
  */
void delay_cl3(uint32_t delay)
{
   
   // STM32 Delay with HAL
   HAL_Delay(delay);
 800139c:	f7ff b8d2 	b.w	8000544 <HAL_Delay>

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	2400      	movs	r4, #0
{
 80013a4:	b09b      	sub	sp, #108	; 0x6c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013aa:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80013ae:	e9cd 4404 	strd	r4, r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b2:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80013b6:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80013ba:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	4b22      	ldr	r3, [pc, #136]	; (8001448 <SystemClock_Config+0xa8>)
 80013c0:	9400      	str	r4, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c4:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013cc:	641a      	str	r2, [r3, #64]	; 0x40
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d4:	9300      	str	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d6:	4b1d      	ldr	r3, [pc, #116]	; (800144c <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013da:	9401      	str	r4, [sp, #4]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013ea:	9301      	str	r3, [sp, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80013ec:	2205      	movs	r2, #5
 80013ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013f6:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f8:	2502      	movs	r5, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013fa:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013fc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001402:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001404:	2254      	movs	r2, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001406:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001408:	e9cd 1315 	strd	r1, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140c:	9514      	str	r5, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800140e:	e9cd 2517 	strd	r2, r5, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001412:	9319      	str	r3, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001414:	f7ff f906 	bl	8000624 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001418:	220f      	movs	r2, #15
 800141a:	2302      	movs	r3, #2
 800141c:	e9cd 2302 	strd	r2, r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001420:	4629      	mov	r1, r5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001428:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800142a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800142e:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001430:	f7ff fae4 	bl	80009fc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001434:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001438:	a808      	add	r0, sp, #32
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800143a:	9508      	str	r5, [sp, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800143c:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143e:	f7ff fba9 	bl	8000b94 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001442:	b01b      	add	sp, #108	; 0x6c
 8001444:	bd30      	pop	{r4, r5, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40007000 	.word	0x40007000

08001450 <boardInitCL3>:
{
 8001450:	b508      	push	{r3, lr}
   HAL_Init();
 8001452:	f7ff f84b 	bl	80004ec <HAL_Init>
   SystemClock_Config();
 8001456:	f7ff ffa3 	bl	80013a0 <SystemClock_Config>
   gpioInitEnable();
 800145a:	f000 f8e3 	bl	8001624 <gpioInitEnable>
    gpioInitInput( KBD_ABJ, LL_GPIO_PULL_UP);
 800145e:	2101      	movs	r1, #1
 8001460:	2000      	movs	r0, #0
 8001462:	f000 f927 	bl	80016b4 <gpioInitInput>
	gpioInitInput( KBD_DER, LL_GPIO_PULL_UP);
 8001466:	2101      	movs	r1, #1
 8001468:	4608      	mov	r0, r1
 800146a:	f000 f923 	bl	80016b4 <gpioInitInput>
	gpioInitInput( KBD_IZQ, LL_GPIO_PULL_UP);
 800146e:	2101      	movs	r1, #1
 8001470:	2002      	movs	r0, #2
 8001472:	f000 f91f 	bl	80016b4 <gpioInitInput>
	gpioInitInput( KBD_ARR, LL_GPIO_PULL_UP);
 8001476:	2101      	movs	r1, #1
 8001478:	2003      	movs	r0, #3
 800147a:	f000 f91b 	bl	80016b4 <gpioInitInput>
	gpioInitInput( SDIO_CD, LL_GPIO_PULL_UP);
 800147e:	2101      	movs	r1, #1
 8001480:	2004      	movs	r0, #4
 8001482:	f000 f917 	bl	80016b4 <gpioInitInput>
	gpioInitInput( SDIO_INS, LL_GPIO_PULL_NO);
 8001486:	2100      	movs	r1, #0
 8001488:	2005      	movs	r0, #5
 800148a:	f000 f913 	bl	80016b4 <gpioInitInput>
    gpioInitOutput(EXP_PW_PA0);
 800148e:	2000      	movs	r0, #0
 8001490:	f000 f95e 	bl	8001750 <gpioInitOutput>
	gpioInitOutput(LCD_PW_PA1);
 8001494:	2001      	movs	r0, #1
 8001496:	f000 f95b 	bl	8001750 <gpioInitOutput>
	gpioInitOutput(OLED_PB2);
 800149a:	2002      	movs	r0, #2
 800149c:	f000 f958 	bl	8001750 <gpioInitOutput>
	gpioInitOutput(IOT_PW_PB8);
 80014a0:	2003      	movs	r0, #3
 80014a2:	f000 f955 	bl	8001750 <gpioInitOutput>
	gpioInitOutput(SER_PW_PB9);
 80014a6:	2004      	movs	r0, #4
 80014a8:	f000 f952 	bl	8001750 <gpioInitOutput>
    gpioInitOutput(RS485_DE_PB10);
 80014ac:	2005      	movs	r0, #5
 80014ae:	f000 f94f 	bl	8001750 <gpioInitOutput>
	gpioInitOutput(LCD_CLK_PB12);
 80014b2:	2006      	movs	r0, #6
 80014b4:	f000 f94c 	bl	8001750 <gpioInitOutput>
	gpioInitOutput(LCD_DATA_PB13);
 80014b8:	2007      	movs	r0, #7
 80014ba:	f000 f949 	bl	8001750 <gpioInitOutput>
	gpioInitOutput(SPI_CS_PB14);
 80014be:	2008      	movs	r0, #8
 80014c0:	f000 f946 	bl	8001750 <gpioInitOutput>
	gpioInitOutput(SPI_DC_PB15);
 80014c4:	2009      	movs	r0, #9
 80014c6:	f000 f943 	bl	8001750 <gpioInitOutput>
	gpioInitOutput(SPI_RES_PC13);
 80014ca:	200a      	movs	r0, #10
 80014cc:	f000 f940 	bl	8001750 <gpioInitOutput>
}
 80014d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	gpioInit_INT1();
 80014d4:	f000 b9b2 	b.w	800183c <gpioInit_INT1>

080014d8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80014da:	6802      	ldr	r2, [r0, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d000      	beq.n	80014e2 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014e0:	4770      	bx	lr
    HAL_IncTick();
 80014e2:	f7ff b81d 	b.w	8000520 <HAL_IncTick>
 80014e6:	bf00      	nop
 80014e8:	40010000 	.word	0x40010000

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_MspInit+0x34>)
 80014f0:	2100      	movs	r1, #0
 80014f2:	9100      	str	r1, [sp, #0]
 80014f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014fa:	645a      	str	r2, [r3, #68]	; 0x44
 80014fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014fe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001502:	9200      	str	r2, [sp, #0]
 8001504:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	9101      	str	r1, [sp, #4]
 8001508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800150a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800150e:	641a      	str	r2, [r3, #64]	; 0x40
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	b002      	add	sp, #8
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800

08001524 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b530      	push	{r4, r5, lr}
 8001526:	4601      	mov	r1, r0
 8001528:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800152a:	2200      	movs	r2, #0
 800152c:	2019      	movs	r0, #25
 800152e:	f7ff f82d 	bl	800058c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8001532:	2019      	movs	r0, #25
 8001534:	f7ff f868 	bl	8000608 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001538:	2500      	movs	r5, #0
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_InitTick+0x6c>)
 800153c:	9502      	str	r5, [sp, #8]
 800153e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001540:	4c14      	ldr	r4, [pc, #80]	; (8001594 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001542:	f042 0201 	orr.w	r2, r2, #1
 8001546:	645a      	str	r2, [r3, #68]	; 0x44
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f003 0301 	and.w	r3, r3, #1
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800154e:	a901      	add	r1, sp, #4
 8001550:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001552:	9302      	str	r3, [sp, #8]
 8001554:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001556:	f7ff fafb 	bl	8000b50 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800155a:	f7ff fae9 	bl	8000b30 <HAL_RCC_GetPCLK2Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_InitTick+0x74>)
  htim1.Instance = TIM1;
 8001560:	490e      	ldr	r1, [pc, #56]	; (800159c <HAL_InitTick+0x78>)
 8001562:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001564:	fba3 3000 	umull	r3, r0, r3, r0
 8001568:	0c83      	lsrs	r3, r0, #18
 800156a:	3b01      	subs	r3, #1
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800156c:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001570:	4620      	mov	r0, r4
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001572:	60e2      	str	r2, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001574:	6063      	str	r3, [r4, #4]
  htim1.Init.ClockDivision = 0;
 8001576:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800157a:	f7ff fbb9 	bl	8000cf0 <HAL_TIM_Base_Init>
 800157e:	b110      	cbz	r0, 8001586 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001580:	2001      	movs	r0, #1
}
 8001582:	b009      	add	sp, #36	; 0x24
 8001584:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8001586:	4620      	mov	r0, r4
 8001588:	f7ff fc1e 	bl	8000dc8 <HAL_TIM_Base_Start_IT>
}
 800158c:	b009      	add	sp, #36	; 0x24
 800158e:	bd30      	pop	{r4, r5, pc}
 8001590:	40023800 	.word	0x40023800
 8001594:	20000094 	.word	0x20000094
 8001598:	431bde83 	.word	0x431bde83
 800159c:	40010000 	.word	0x40010000

080015a0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop

080015a4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <HardFault_Handler>
 80015a6:	bf00      	nop

080015a8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <MemManage_Handler>
 80015aa:	bf00      	nop

080015ac <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <BusFault_Handler>
 80015ae:	bf00      	nop

080015b0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler>
 80015b2:	bf00      	nop

080015b4 <SVC_Handler>:
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop

080015b8 <DebugMon_Handler>:
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop

080015bc <PendSV_Handler>:
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop

080015c0 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015c0:	4801      	ldr	r0, [pc, #4]	; (80015c8 <TIM1_UP_TIM10_IRQHandler+0x8>)
 80015c2:	f7ff bc19 	b.w	8000df8 <HAL_TIM_IRQHandler>
 80015c6:	bf00      	nop
 80015c8:	20000094 	.word	0x20000094

080015cc <USART1_IRQHandler>:
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop

080015d0 <USART6_IRQHandler>:
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop

080015d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d4:	4910      	ldr	r1, [pc, #64]	; (8001618 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80015dc:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80015e0:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80015e6:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80015e8:	4c0d      	ldr	r4, [pc, #52]	; (8001620 <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 80015ea:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80015ec:	f042 0201 	orr.w	r2, r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80015f2:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80015fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015fe:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8001600:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001602:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001604:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001608:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800160c:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 800160e:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001610:	608c      	str	r4, [r1, #8]
#endif
}
 8001612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00
 800161c:	40023800 	.word	0x40023800
 8001620:	24003010 	.word	0x24003010

08001624 <gpioInitEnable>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <gpioInitEnable+0x7c>)
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001626:	481f      	ldr	r0, [pc, #124]	; (80016a4 <gpioInitEnable+0x80>)
 8001628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800162a:	491f      	ldr	r1, [pc, #124]	; (80016a8 <gpioInitEnable+0x84>)
            Call first, similar to gpioInit(0, GPIO_ENABLE) on sAPI 
  * @param  None
  * @retval None
  */
void gpioInitEnable(void)
{
 800162c:	b470      	push	{r4, r5, r6}
 800162e:	f042 0204 	orr.w	r2, r2, #4
 8001632:	631a      	str	r2, [r3, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001636:	b087      	sub	sp, #28
 8001638:	f002 0204 	and.w	r2, r2, #4
 800163c:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 800163e:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001642:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001646:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800164a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800164e:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8001650:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001654:	f042 0201 	orr.w	r2, r2, #1
 8001658:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800165a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800165c:	f002 0201 	and.w	r2, r2, #1
 8001660:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001662:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001666:	f042 0202 	orr.w	r2, r2, #2
 800166a:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800166c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800166e:	f002 0202 	and.w	r2, r2, #2
 8001672:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001674:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001676:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001678:	f042 0208 	orr.w	r2, r2, #8
 800167c:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <gpioInitEnable+0x88>)
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001688:	9e01      	ldr	r6, [sp, #4]
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <gpioInitEnable+0x8c>)
 800168c:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8001690:	f44f 3540 	mov.w	r5, #196608	; 0x30000
 8001694:	6184      	str	r4, [r0, #24]
 8001696:	618d      	str	r5, [r1, #24]
 8001698:	619a      	str	r2, [r3, #24]
  LL_GPIO_ResetOutputPin(GPIOA, PA0_EN_EXP_PW_Pin|PA1_EN_LCD_PW_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, OLED_Pin|RS485_DE_Pin|LCD_DATA_Pin|LCD_CLK_Pin 
                          |SPI_CS_Pin|SPI_DC_Pin|PB8_EN_IOT_PW_Pin|PB9_EN_SER_PWR_Pin);
}
 800169a:	b007      	add	sp, #28
 800169c:	bc70      	pop	{r4, r5, r6}
 800169e:	4770      	bx	lr
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020800 	.word	0x40020800
 80016a8:	40020000 	.word	0x40020000
 80016ac:	f7040000 	.word	0xf7040000
 80016b0:	40020400 	.word	0x40020400

080016b4 <gpioInitInput>:
* @param  inputMap_t input, uint32_t config_pull
* @retval 0 if error, 1 if ok		
*/

bool_t gpioInitInput( inputMap_t input, uint32_t config_pull )
{
 80016b4:	b510      	push	{r4, lr}
 80016b6:	b086      	sub	sp, #24

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	2300      	movs	r3, #0
 80016ba:	e9cd 3301 	strd	r3, r3, [sp, #4]
  bool_t ret_val     = 1;
 
 /* Common parameters */
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = config_pull;
 80016be:	e9cd 1304 	strd	r1, r3, [sp, #16]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c2:	9303      	str	r3, [sp, #12]
  switch(input){
 80016c4:	2805      	cmp	r0, #5
 80016c6:	d83d      	bhi.n	8001744 <gpioInitInput+0x90>
 80016c8:	e8df f000 	tbb	[pc, r0]
 80016cc:	2920160d 	.word	0x2920160d
 80016d0:	0332      	.short	0x0332
	  case KBD_ARR:
	    GPIO_InitStruct.Pin = K_ARR_PC5_Pin;
		LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
		break;		
	  case SDIO_INS:
	    GPIO_InitStruct.Pin = SD_INS_Pin;
 80016d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
		LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d6:	481c      	ldr	r0, [pc, #112]	; (8001748 <gpioInitInput+0x94>)
	    GPIO_InitStruct.Pin = SD_INS_Pin;
 80016d8:	9300      	str	r3, [sp, #0]
		LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016da:	4669      	mov	r1, sp
 80016dc:	f7ff fc9a 	bl	8001014 <LL_GPIO_Init>
  bool_t ret_val     = 1;
 80016e0:	2001      	movs	r0, #1
	  default:
	    ret_val = 0;
	    break;
   }
 return ret_val;
}
 80016e2:	b006      	add	sp, #24
 80016e4:	bd10      	pop	{r4, pc}
	    GPIO_InitStruct.Pin = K_ABJ_PB0_Pin;
 80016e6:	2401      	movs	r4, #1
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e8:	4669      	mov	r1, sp
 80016ea:	4818      	ldr	r0, [pc, #96]	; (800174c <gpioInitInput+0x98>)
	    GPIO_InitStruct.Pin = K_ABJ_PB0_Pin;
 80016ec:	9400      	str	r4, [sp, #0]
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ee:	f7ff fc91 	bl	8001014 <LL_GPIO_Init>
  bool_t ret_val     = 1;
 80016f2:	4620      	mov	r0, r4
}
 80016f4:	b006      	add	sp, #24
 80016f6:	bd10      	pop	{r4, pc}
 80016f8:	4604      	mov	r4, r0
	    GPIO_InitStruct.Pin = K_DER_PB1_Pin;
 80016fa:	2302      	movs	r3, #2
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fc:	4669      	mov	r1, sp
 80016fe:	4813      	ldr	r0, [pc, #76]	; (800174c <gpioInitInput+0x98>)
	    GPIO_InitStruct.Pin = K_DER_PB1_Pin;
 8001700:	9300      	str	r3, [sp, #0]
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f7ff fc87 	bl	8001014 <LL_GPIO_Init>
  bool_t ret_val     = 1;
 8001706:	4620      	mov	r0, r4
}
 8001708:	b006      	add	sp, #24
 800170a:	bd10      	pop	{r4, pc}
	    GPIO_InitStruct.Pin = K_IZQ_PC4_Pin;
 800170c:	2310      	movs	r3, #16
		LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170e:	4669      	mov	r1, sp
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <gpioInitInput+0x94>)
	    GPIO_InitStruct.Pin = K_IZQ_PC4_Pin;
 8001712:	9300      	str	r3, [sp, #0]
		LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001714:	f7ff fc7e 	bl	8001014 <LL_GPIO_Init>
  bool_t ret_val     = 1;
 8001718:	2001      	movs	r0, #1
}
 800171a:	b006      	add	sp, #24
 800171c:	bd10      	pop	{r4, pc}
	    GPIO_InitStruct.Pin = K_ARR_PC5_Pin;
 800171e:	2320      	movs	r3, #32
		LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001720:	4669      	mov	r1, sp
 8001722:	4809      	ldr	r0, [pc, #36]	; (8001748 <gpioInitInput+0x94>)
	    GPIO_InitStruct.Pin = K_ARR_PC5_Pin;
 8001724:	9300      	str	r3, [sp, #0]
		LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001726:	f7ff fc75 	bl	8001014 <LL_GPIO_Init>
  bool_t ret_val     = 1;
 800172a:	2001      	movs	r0, #1
}
 800172c:	b006      	add	sp, #24
 800172e:	bd10      	pop	{r4, pc}
	    GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001730:	f44f 6300 	mov.w	r3, #2048	; 0x800
		LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001734:	4669      	mov	r1, sp
 8001736:	4804      	ldr	r0, [pc, #16]	; (8001748 <gpioInitInput+0x94>)
	    GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001738:	9300      	str	r3, [sp, #0]
		LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173a:	f7ff fc6b 	bl	8001014 <LL_GPIO_Init>
  bool_t ret_val     = 1;
 800173e:	2001      	movs	r0, #1
}
 8001740:	b006      	add	sp, #24
 8001742:	bd10      	pop	{r4, pc}
  switch(input){
 8001744:	2000      	movs	r0, #0
 8001746:	e7cc      	b.n	80016e2 <gpioInitInput+0x2e>
 8001748:	40020800 	.word	0x40020800
 800174c:	40020400 	.word	0x40020400

08001750 <gpioInitOutput>:
* @retval 0 if error, 1 if ok		
*/		
 
   
bool_t gpioInitOutput( outputMap_t output)
{
 8001750:	b510      	push	{r4, lr}
 8001752:	b086      	sub	sp, #24
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	2300      	movs	r3, #0
  bool_t ret_val     = 1;
  /*
  * Common: Pushpull outputs, LowSpeed, no pullups
  */
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001756:	2201      	movs	r2, #1
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800175c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001760:	9201      	str	r2, [sp, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  
  switch(output){
 8001762:	280a      	cmp	r0, #10
 8001764:	d862      	bhi.n	800182c <gpioInitOutput+0xdc>
 8001766:	e8df f000 	tbb	[pc, r0]
 800176a:	1810      	.short	0x1810
 800176c:	3b322921 	.word	0x3b322921
 8001770:	584f4644 	.word	0x584f4644
 8001774:	06          	.byte	0x06
 8001775:	00          	.byte	0x00
	    GPIO_InitStruct.Pin = SPI_DC_Pin;
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
		break;
	  case SPI_RES_PC13:
	    GPIO_InitStruct.Pin = SPI_RES_Pin;
		LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001776:	482e      	ldr	r0, [pc, #184]	; (8001830 <gpioInitOutput+0xe0>)
	    GPIO_InitStruct.Pin = SPI_RES_Pin;
 8001778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177c:	4669      	mov	r1, sp
	    GPIO_InitStruct.Pin = SPI_RES_Pin;
 800177e:	9300      	str	r3, [sp, #0]
		LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001780:	f7ff fc48 	bl	8001014 <LL_GPIO_Init>
  bool_t ret_val     = 1;
 8001784:	2001      	movs	r0, #1
	  default:
	    ret_val = 0;
	    break;
   }
 return ret_val;
}
 8001786:	b006      	add	sp, #24
 8001788:	bd10      	pop	{r4, pc}
	    GPIO_InitStruct.Pin = PA0_EN_EXP_PW_Pin;
 800178a:	2401      	movs	r4, #1
		LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	4829      	ldr	r0, [pc, #164]	; (8001834 <gpioInitOutput+0xe4>)
	    GPIO_InitStruct.Pin = PA0_EN_EXP_PW_Pin;
 800178e:	9400      	str	r4, [sp, #0]
		LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	4669      	mov	r1, sp
 8001792:	f7ff fc3f 	bl	8001014 <LL_GPIO_Init>
  bool_t ret_val     = 1;
 8001796:	4620      	mov	r0, r4
		break;
 8001798:	e7f5      	b.n	8001786 <gpioInitOutput+0x36>
 800179a:	4604      	mov	r4, r0
	    GPIO_InitStruct.Pin = PA1_EN_LCD_PW_Pin;
 800179c:	2302      	movs	r3, #2
		LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179e:	4825      	ldr	r0, [pc, #148]	; (8001834 <gpioInitOutput+0xe4>)
	    GPIO_InitStruct.Pin = PA1_EN_LCD_PW_Pin;
 80017a0:	9300      	str	r3, [sp, #0]
		LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	4669      	mov	r1, sp
 80017a4:	f7ff fc36 	bl	8001014 <LL_GPIO_Init>
  bool_t ret_val     = 1;
 80017a8:	4620      	mov	r0, r4
		break;
 80017aa:	e7ec      	b.n	8001786 <gpioInitOutput+0x36>
	    GPIO_InitStruct.Pin = OLED_Pin;
 80017ac:	2304      	movs	r3, #4
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	4822      	ldr	r0, [pc, #136]	; (8001838 <gpioInitOutput+0xe8>)
	    GPIO_InitStruct.Pin = OLED_Pin;
 80017b0:	9300      	str	r3, [sp, #0]
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	4669      	mov	r1, sp
 80017b4:	f7ff fc2e 	bl	8001014 <LL_GPIO_Init>
  bool_t ret_val     = 1;
 80017b8:	2001      	movs	r0, #1
		break;	
 80017ba:	e7e4      	b.n	8001786 <gpioInitOutput+0x36>
	    GPIO_InitStruct.Pin = PB8_EN_IOT_PW_Pin;
 80017bc:	f44f 7380 	mov.w	r3, #256	; 0x100
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c0:	481d      	ldr	r0, [pc, #116]	; (8001838 <gpioInitOutput+0xe8>)
	    GPIO_InitStruct.Pin = PB8_EN_IOT_PW_Pin;
 80017c2:	9300      	str	r3, [sp, #0]
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c4:	4669      	mov	r1, sp
 80017c6:	f7ff fc25 	bl	8001014 <LL_GPIO_Init>
  bool_t ret_val     = 1;
 80017ca:	2001      	movs	r0, #1
		break;		
 80017cc:	e7db      	b.n	8001786 <gpioInitOutput+0x36>
	    GPIO_InitStruct.Pin = PB9_EN_SER_PWR_Pin;
 80017ce:	f44f 7300 	mov.w	r3, #512	; 0x200
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d2:	4819      	ldr	r0, [pc, #100]	; (8001838 <gpioInitOutput+0xe8>)
	    GPIO_InitStruct.Pin = PB9_EN_SER_PWR_Pin;
 80017d4:	9300      	str	r3, [sp, #0]
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d6:	4669      	mov	r1, sp
 80017d8:	f7ff fc1c 	bl	8001014 <LL_GPIO_Init>
  bool_t ret_val     = 1;
 80017dc:	2001      	movs	r0, #1
		break;	
 80017de:	e7d2      	b.n	8001786 <gpioInitOutput+0x36>
	    GPIO_InitStruct.Pin = RS485_DE_Pin;
 80017e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	4814      	ldr	r0, [pc, #80]	; (8001838 <gpioInitOutput+0xe8>)
	    GPIO_InitStruct.Pin = RS485_DE_Pin;
 80017e6:	9300      	str	r3, [sp, #0]
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	4669      	mov	r1, sp
 80017ea:	f7ff fc13 	bl	8001014 <LL_GPIO_Init>
  bool_t ret_val     = 1;
 80017ee:	2001      	movs	r0, #1
		break;
 80017f0:	e7c9      	b.n	8001786 <gpioInitOutput+0x36>
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	4811      	ldr	r0, [pc, #68]	; (8001838 <gpioInitOutput+0xe8>)
 80017f4:	e7c0      	b.n	8001778 <gpioInitOutput+0x28>
	    GPIO_InitStruct.Pin = LCD_DATA_Pin;
 80017f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fa:	480f      	ldr	r0, [pc, #60]	; (8001838 <gpioInitOutput+0xe8>)
	    GPIO_InitStruct.Pin = LCD_DATA_Pin;
 80017fc:	9300      	str	r3, [sp, #0]
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	4669      	mov	r1, sp
 8001800:	f7ff fc08 	bl	8001014 <LL_GPIO_Init>
  bool_t ret_val     = 1;
 8001804:	2001      	movs	r0, #1
		break;
 8001806:	e7be      	b.n	8001786 <gpioInitOutput+0x36>
	    GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001808:	f44f 4380 	mov.w	r3, #16384	; 0x4000
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	480a      	ldr	r0, [pc, #40]	; (8001838 <gpioInitOutput+0xe8>)
	    GPIO_InitStruct.Pin = SPI_CS_Pin;
 800180e:	9300      	str	r3, [sp, #0]
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001810:	4669      	mov	r1, sp
 8001812:	f7ff fbff 	bl	8001014 <LL_GPIO_Init>
  bool_t ret_val     = 1;
 8001816:	2001      	movs	r0, #1
		break;
 8001818:	e7b5      	b.n	8001786 <gpioInitOutput+0x36>
	    GPIO_InitStruct.Pin = SPI_DC_Pin;
 800181a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181e:	4806      	ldr	r0, [pc, #24]	; (8001838 <gpioInitOutput+0xe8>)
	    GPIO_InitStruct.Pin = SPI_DC_Pin;
 8001820:	9300      	str	r3, [sp, #0]
		LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	4669      	mov	r1, sp
 8001824:	f7ff fbf6 	bl	8001014 <LL_GPIO_Init>
  bool_t ret_val     = 1;
 8001828:	2001      	movs	r0, #1
		break;
 800182a:	e7ac      	b.n	8001786 <gpioInitOutput+0x36>
  switch(output){
 800182c:	2000      	movs	r0, #0
 800182e:	e7aa      	b.n	8001786 <gpioInitOutput+0x36>
 8001830:	40020800 	.word	0x40020800
 8001834:	40020000 	.word	0x40020000
 8001838:	40020400 	.word	0x40020400

0800183c <gpioInit_INT1>:
  * @param  None
  * @retval None
  */
	
void gpioInit_INT1(void)
{
 800183c:	b510      	push	{r4, lr}
 800183e:	b082      	sub	sp, #8

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001840:	2300      	movs	r3, #0
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8001842:	4a1b      	ldr	r2, [pc, #108]	; (80018b0 <gpioInit_INT1+0x74>)
 8001844:	f8ad 3005 	strh.w	r3, [sp, #5]
 8001848:	f88d 3007 	strb.w	r3, [sp, #7]
 800184c:	6953      	ldr	r3, [r2, #20]
 800184e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001852:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001856:	fa91 f1a1 	rbit	r1, r1
		
  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE15);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800185a:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 800185e:	6153      	str	r3, [r2, #20]
  EXTI_InitStruct.LineCommand = ENABLE;
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
  LL_EXTI_Init(&EXTI_InitStruct);
 8001860:	4668      	mov	r0, sp
  EXTI_InitStruct.LineCommand = ENABLE;
 8001862:	2201      	movs	r2, #1
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001864:	2302      	movs	r3, #2
  EXTI_InitStruct.LineCommand = ENABLE;
 8001866:	f88d 2004 	strb.w	r2, [sp, #4]
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800186a:	9400      	str	r4, [sp, #0]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800186c:	f88d 3006 	strb.w	r3, [sp, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001870:	f7ff fb70 	bl	8000f54 <LL_EXTI_Init>
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001874:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <gpioInit_INT1+0x78>)
 8001876:	68d0      	ldr	r0, [r2, #12]
 8001878:	fa94 f3a4 	rbit	r3, r4
 800187c:	fab3 f383 	clz	r3, r3
 8001880:	2103      	movs	r1, #3
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	ea20 0303 	bic.w	r3, r0, r3
 800188c:	fa94 f0a4 	rbit	r0, r4
 8001890:	60d3      	str	r3, [r2, #12]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001892:	6810      	ldr	r0, [r2, #0]
 8001894:	fa94 f3a4 	rbit	r3, r4
 8001898:	fab3 f383 	clz	r3, r3
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	ea20 0303 	bic.w	r3, r0, r3
 80018a6:	fa94 f4a4 	rbit	r4, r4
 80018aa:	6013      	str	r3, [r2, #0]
  LL_GPIO_SetPinPull(INT1_N_GPIO_Port, INT1_N_Pin, LL_GPIO_PULL_NO);

  /**/
  LL_GPIO_SetPinMode(INT1_N_GPIO_Port, INT1_N_Pin, LL_GPIO_MODE_INPUT);

}
 80018ac:	b002      	add	sp, #8
 80018ae:	bd10      	pop	{r4, pc}
 80018b0:	40013800 	.word	0x40013800
 80018b4:	40020000 	.word	0x40020000

080018b8 <gpioRead>:

bool_t gpioRead( inputMap_t input )
{

uint32_t ret_val = 0;
switch(input){
 80018b8:	2805      	cmp	r0, #5
 80018ba:	d822      	bhi.n	8001902 <gpioRead+0x4a>
 80018bc:	e8df f000 	tbb	[pc, r0]
 80018c0:	17120d08 	.word	0x17120d08
 80018c4:	031c      	.short	0x031c
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <gpioRead+0x50>)
 80018c8:	6918      	ldr	r0, [r3, #16]
		break;			
	  default:
	    ret_val = 1;
	    break;
    }     
   return ((bool_t)ret_val);
 80018ca:	f3c0 2080 	ubfx	r0, r0, #10, #1
		break;	
 80018ce:	4770      	bx	lr
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <gpioRead+0x54>)
 80018d2:	6918      	ldr	r0, [r3, #16]
   return ((bool_t)ret_val);
 80018d4:	f000 0001 	and.w	r0, r0, #1
		break;
 80018d8:	4770      	bx	lr
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <gpioRead+0x54>)
 80018dc:	6918      	ldr	r0, [r3, #16]
   return ((bool_t)ret_val);
 80018de:	f3c0 0040 	ubfx	r0, r0, #1, #1
		break;
 80018e2:	4770      	bx	lr
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <gpioRead+0x50>)
 80018e6:	6918      	ldr	r0, [r3, #16]
   return ((bool_t)ret_val);
 80018e8:	f3c0 1000 	ubfx	r0, r0, #4, #1
		break;	
 80018ec:	4770      	bx	lr
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <gpioRead+0x50>)
 80018f0:	6918      	ldr	r0, [r3, #16]
   return ((bool_t)ret_val);
 80018f2:	f3c0 1040 	ubfx	r0, r0, #5, #1
		break;		
 80018f6:	4770      	bx	lr
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <gpioRead+0x50>)
 80018fa:	6918      	ldr	r0, [r3, #16]
   return ((bool_t)ret_val);
 80018fc:	f3c0 20c0 	ubfx	r0, r0, #11, #1
		break;			
 8001900:	4770      	bx	lr
switch(input){
 8001902:	2001      	movs	r0, #1
}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40020800 	.word	0x40020800
 800190c:	40020400 	.word	0x40020400

08001910 <gpioWrite>:

bool_t gpioWrite( outputMap_t output, bool_t value)
{
  bool_t ret_val     = 1;
  
  switch(output){
 8001910:	280a      	cmp	r0, #10
 8001912:	f200 8084 	bhi.w	8001a1e <gpioWrite+0x10e>
 8001916:	e8df f000 	tbb	[pc, r0]
 800191a:	140e      	.short	0x140e
 800191c:	3129211a 	.word	0x3129211a
 8001920:	4f484139 	.word	0x4f484139
 8001924:	06          	.byte	0x06
 8001925:	00          	.byte	0x00
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001926:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <gpioWrite+0x114>)
	  case SPI_DC_PB15:
	    if (value) { LL_GPIO_SetOutputPin(GPIOB, SPI_DC_Pin); }
		else { LL_GPIO_ResetOutputPin(GPIOB, SPI_DC_Pin); }	  	  	  
		break;
	  case SPI_RES_PC13:
	    if (value) { LL_GPIO_SetOutputPin(GPIOC, SPI_RES_Pin); }
 8001928:	2900      	cmp	r1, #0
 800192a:	d032      	beq.n	8001992 <gpioWrite+0x82>
 800192c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001930:	619a      	str	r2, [r3, #24]
  bool_t ret_val     = 1;
 8001932:	2001      	movs	r0, #1
}
 8001934:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001936:	4b3c      	ldr	r3, [pc, #240]	; (8001a28 <gpioWrite+0x118>)
	    if (value) { LL_GPIO_SetOutputPin(GPIOA,PA0_EN_EXP_PW_Pin); }
 8001938:	2900      	cmp	r1, #0
 800193a:	d06b      	beq.n	8001a14 <gpioWrite+0x104>
 800193c:	2001      	movs	r0, #1
 800193e:	6198      	str	r0, [r3, #24]
}
 8001940:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001942:	4b39      	ldr	r3, [pc, #228]	; (8001a28 <gpioWrite+0x118>)
	    if (value) { LL_GPIO_SetOutputPin(GPIOA, PA1_EN_LCD_PW_Pin); }
 8001944:	2900      	cmp	r1, #0
 8001946:	d061      	beq.n	8001a0c <gpioWrite+0xfc>
 8001948:	2202      	movs	r2, #2
 800194a:	619a      	str	r2, [r3, #24]
}
 800194c:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, PinMask);
 800194e:	4b37      	ldr	r3, [pc, #220]	; (8001a2c <gpioWrite+0x11c>)
	    if (value) { LL_GPIO_SetOutputPin(GPIOB, OLED_Pin); }
 8001950:	2900      	cmp	r1, #0
 8001952:	d056      	beq.n	8001a02 <gpioWrite+0xf2>
 8001954:	2204      	movs	r2, #4
 8001956:	619a      	str	r2, [r3, #24]
  bool_t ret_val     = 1;
 8001958:	2001      	movs	r0, #1
}
 800195a:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, PinMask);
 800195c:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <gpioWrite+0x11c>)
	    if (value) { LL_GPIO_SetOutputPin(GPIOB, PB8_EN_IOT_PW_Pin); }
 800195e:	2900      	cmp	r1, #0
 8001960:	d04a      	beq.n	80019f8 <gpioWrite+0xe8>
 8001962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001966:	619a      	str	r2, [r3, #24]
  bool_t ret_val     = 1;
 8001968:	2001      	movs	r0, #1
}
 800196a:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, PinMask);
 800196c:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <gpioWrite+0x11c>)
	    if (value) { LL_GPIO_SetOutputPin(GPIOB, PB9_EN_SER_PWR_Pin); }
 800196e:	2900      	cmp	r1, #0
 8001970:	d03d      	beq.n	80019ee <gpioWrite+0xde>
 8001972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001976:	619a      	str	r2, [r3, #24]
  bool_t ret_val     = 1;
 8001978:	2001      	movs	r0, #1
}
 800197a:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, PinMask);
 800197c:	4b2b      	ldr	r3, [pc, #172]	; (8001a2c <gpioWrite+0x11c>)
	    if (value) { LL_GPIO_SetOutputPin(GPIOB, RS485_DE_Pin); }
 800197e:	2900      	cmp	r1, #0
 8001980:	d030      	beq.n	80019e4 <gpioWrite+0xd4>
 8001982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001986:	619a      	str	r2, [r3, #24]
  bool_t ret_val     = 1;
 8001988:	2001      	movs	r0, #1
}
 800198a:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, PinMask);
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <gpioWrite+0x11c>)
	    if (value) { LL_GPIO_SetOutputPin(GPIOB, LCD_CLK_Pin); }
 800198e:	2900      	cmp	r1, #0
 8001990:	d1cc      	bne.n	800192c <gpioWrite+0x1c>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001992:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001996:	619a      	str	r2, [r3, #24]
  bool_t ret_val     = 1;
 8001998:	2001      	movs	r0, #1
}
 800199a:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, PinMask);
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <gpioWrite+0x11c>)
	    if (value) { LL_GPIO_SetOutputPin(GPIOB, LCD_DATA_Pin); }
 800199e:	b1e1      	cbz	r1, 80019da <gpioWrite+0xca>
 80019a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019a4:	619a      	str	r2, [r3, #24]
  bool_t ret_val     = 1;
 80019a6:	2001      	movs	r0, #1
}
 80019a8:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <gpioWrite+0x11c>)
	    if (value) { LL_GPIO_SetOutputPin(GPIOB, SPI_CS_Pin); }
 80019ac:	b181      	cbz	r1, 80019d0 <gpioWrite+0xc0>
 80019ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019b2:	619a      	str	r2, [r3, #24]
  bool_t ret_val     = 1;
 80019b4:	2001      	movs	r0, #1
}
 80019b6:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, PinMask);
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <gpioWrite+0x11c>)
	    if (value) { LL_GPIO_SetOutputPin(GPIOB, SPI_DC_Pin); }
 80019ba:	b121      	cbz	r1, 80019c6 <gpioWrite+0xb6>
 80019bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019c0:	619a      	str	r2, [r3, #24]
  bool_t ret_val     = 1;
 80019c2:	2001      	movs	r0, #1
}
 80019c4:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019ca:	619a      	str	r2, [r3, #24]
 80019cc:	2001      	movs	r0, #1
}
 80019ce:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d4:	619a      	str	r2, [r3, #24]
 80019d6:	2001      	movs	r0, #1
}
 80019d8:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019de:	619a      	str	r2, [r3, #24]
 80019e0:	2001      	movs	r0, #1
}
 80019e2:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019e8:	619a      	str	r2, [r3, #24]
 80019ea:	2001      	movs	r0, #1
}
 80019ec:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f2:	619a      	str	r2, [r3, #24]
 80019f4:	2001      	movs	r0, #1
}
 80019f6:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80019f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019fc:	619a      	str	r2, [r3, #24]
 80019fe:	2001      	movs	r0, #1
}
 8001a00:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a02:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a06:	619a      	str	r2, [r3, #24]
 8001a08:	2001      	movs	r0, #1
}
 8001a0a:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a10:	619a      	str	r2, [r3, #24]
}
 8001a12:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001a14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a18:	619a      	str	r2, [r3, #24]
 8001a1a:	2001      	movs	r0, #1
}
 8001a1c:	4770      	bx	lr
  switch(output){
 8001a1e:	2000      	movs	r0, #0
	  default:
	    ret_val = 0;
	    break;
   }
 return ret_val;
}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020400 	.word	0x40020400

08001a30 <uartInit>:

/*==================[typedef]================================================*/

//-------------------------------------------------------------
// UART Initialization
bool_t uartInit( uartMap_t uart, uartBaudR_t baudR ){
 8001a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a32:	2903      	cmp	r1, #3
 8001a34:	b093      	sub	sp, #76	; 0x4c
 8001a36:	4605      	mov	r5, r0
 8001a38:	d818      	bhi.n	8001a6c <uartInit+0x3c>
 8001a3a:	4b5e      	ldr	r3, [pc, #376]	; (8001bb4 <uartInit+0x184>)
 8001a3c:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
 8001a40:	2600      	movs	r6, #0
	default:
	   baudRate = 115200;
	   error = 1; 
	   break;	   
}
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a42:	2400      	movs	r4, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};

/* USART1=UART_485 init function */
if( uart == UART_485 ) {
 8001a44:	2d01      	cmp	r5, #1
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a46:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8001a4a:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8001a4e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a52:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001a56:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001a5a:	e9cd 4408 	strd	r4, r4, [sp, #32]
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001a5e:	9411      	str	r4, [sp, #68]	; 0x44
if( uart == UART_485 ) {
 8001a60:	d065      	beq.n	8001b2e <uartInit+0xfe>
  LL_USART_Init(USART1, &USART_InitStruct);
  LL_USART_ConfigAsyncMode(USART1);
  LL_USART_Enable(USART1);
}

else if (uart == UART_TER ){
 8001a62:	b13d      	cbz	r5, 8001a74 <uartInit+0x44>
  LL_USART_ConfigAsyncMode(USART6);
  LL_USART_Enable(USART6);
}
else {
  /* UART2 not implem yet */	
  error = 1;	
 8001a64:	2601      	movs	r6, #1
}	
return(error);
}
 8001a66:	4630      	mov	r0, r6
 8001a68:	b013      	add	sp, #76	; 0x4c
 8001a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
bool_t uartInit( uartMap_t uart, uartBaudR_t baudR ){
 8001a6c:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
 8001a70:	2601      	movs	r6, #1
 8001a72:	e7e6      	b.n	8001a42 <uartInit+0x12>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a74:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <uartInit+0x188>)
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a76:	4851      	ldr	r0, [pc, #324]	; (8001bbc <uartInit+0x18c>)
 8001a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_USART_Init(USART6, &USART_InitStruct);
 8001a7a:	4c51      	ldr	r4, [pc, #324]	; (8001bc0 <uartInit+0x190>)
 8001a7c:	f042 0220 	orr.w	r2, r2, #32
 8001a80:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a84:	f002 0220 	and.w	r2, r2, #32
 8001a88:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001a8a:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a8e:	f042 0204 	orr.w	r2, r2, #4
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001a9c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001aa2:	22c0      	movs	r2, #192	; 0xc0
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aaa:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001aac:	2201      	movs	r2, #1
 8001aae:	2308      	movs	r3, #8
 8001ab0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab4:	f7ff faae 	bl	8001014 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b42      	ldr	r3, [pc, #264]	; (8001bc4 <uartInit+0x194>)
 8001aba:	68d8      	ldr	r0, [r3, #12]
 8001abc:	f3c0 2002 	ubfx	r0, r0, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac0:	f1c0 0207 	rsb	r2, r0, #7
 8001ac4:	2a04      	cmp	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac6:	f100 0304 	add.w	r3, r0, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aca:	bf28      	it	cs
 8001acc:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ace:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	fa03 f302 	lsl.w	r3, r3, r2
 8001ad8:	ea6f 0303 	mvn.w	r3, r3
 8001adc:	f003 0305 	and.w	r3, r3, #5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae0:	bf88      	it	hi
 8001ae2:	1ec5      	subhi	r5, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	fa03 f505 	lsl.w	r5, r3, r5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae8:	012d      	lsls	r5, r5, #4
 8001aea:	4b37      	ldr	r3, [pc, #220]	; (8001bc8 <uartInit+0x198>)
 8001aec:	b2ed      	uxtb	r5, r5
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aee:	2280      	movs	r2, #128	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	f883 5347 	strb.w	r5, [r3, #839]	; 0x347
  LL_USART_Init(USART6, &USART_InitStruct);
 8001af4:	a90b      	add	r1, sp, #44	; 0x2c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001af6:	609a      	str	r2, [r3, #8]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001af8:	2300      	movs	r3, #0
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001afa:	220c      	movs	r2, #12
  LL_USART_Init(USART6, &USART_InitStruct);
 8001afc:	4620      	mov	r0, r4
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001afe:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001b02:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001b06:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  USART_InitStruct.BaudRate = baudRate;
 8001b0a:	970b      	str	r7, [sp, #44]	; 0x2c
  LL_USART_Init(USART6, &USART_InitStruct);
 8001b0c:	f7ff fb82 	bl	8001214 <LL_USART_Init>
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b10:	6923      	ldr	r3, [r4, #16]
 8001b12:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001b16:	6123      	str	r3, [r4, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001b18:	6963      	ldr	r3, [r4, #20]
 8001b1a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001b1e:	6163      	str	r3, [r4, #20]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001b20:	68e3      	ldr	r3, [r4, #12]
}
 8001b22:	4630      	mov	r0, r6
 8001b24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b28:	60e3      	str	r3, [r4, #12]
 8001b2a:	b013      	add	sp, #76	; 0x4c
 8001b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b2e:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <uartInit+0x188>)
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	4826      	ldr	r0, [pc, #152]	; (8001bcc <uartInit+0x19c>)
 8001b32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b34:	f042 0210 	orr.w	r2, r2, #16
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b3c:	f002 0210 	and.w	r2, r2, #16
 8001b40:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001b42:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001b54:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8001b5a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001b5e:	2302      	movs	r3, #2
 8001b60:	e9cd 2304 	strd	r2, r3, [sp, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001b66:	2201      	movs	r2, #1
 8001b68:	2307      	movs	r3, #7
 8001b6a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f7ff fa51 	bl	8001014 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b72:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <uartInit+0x194>)
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	f3c2 2202 	ubfx	r2, r2, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7a:	f1c2 0007 	rsb	r0, r2, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7e:	1d13      	adds	r3, r2, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b80:	2804      	cmp	r0, #4
 8001b82:	bf28      	it	cs
 8001b84:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b86:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8c:	fa03 f300 	lsl.w	r3, r3, r0
 8001b90:	ea6f 0303 	mvn.w	r3, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b94:	bf88      	it	hi
 8001b96:	1ed4      	subhi	r4, r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	f003 0305 	and.w	r3, r3, #5
 8001b9c:	fa03 f404 	lsl.w	r4, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	0124      	lsls	r4, r4, #4
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <uartInit+0x198>)
 8001ba4:	b2e4      	uxtb	r4, r4
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba6:	2220      	movs	r2, #32
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	f883 4325 	strb.w	r4, [r3, #805]	; 0x325
  LL_USART_Init(USART1, &USART_InitStruct);
 8001bac:	a90b      	add	r1, sp, #44	; 0x2c
 8001bae:	4c08      	ldr	r4, [pc, #32]	; (8001bd0 <uartInit+0x1a0>)
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb0:	605a      	str	r2, [r3, #4]
  USART_InitStruct.BaudRate = baudRate;
 8001bb2:	e7a1      	b.n	8001af8 <uartInit+0xc8>
 8001bb4:	08001ce0 	.word	0x08001ce0
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	40011400 	.word	0x40011400
 8001bc4:	e000ed00 	.word	0xe000ed00
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	40011000 	.word	0x40011000

08001bd4 <printmsg_cl3>:


// Prints message out on Terminal UART6 - blocking
// 18.4.2019 Use LL_USART functions as in STM32F4 LL_Examples
void printmsg_cl3(char *msg)
{
 8001bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd6:	4606      	mov	r6, r0
 8001bd8:	1e45      	subs	r5, r0, #1
	for(uint32_t i=0; i < strlen(msg); i++)
 8001bda:	f1c0 0701 	rsb	r7, r0, #1
 8001bde:	4630      	mov	r0, r6
 8001be0:	f7fe fafa 	bl	80001d8 <strlen>
 8001be4:	197b      	adds	r3, r7, r5
 8001be6:	4298      	cmp	r0, r3
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8001be8:	4c09      	ldr	r4, [pc, #36]	; (8001c10 <printmsg_cl3+0x3c>)
 8001bea:	d90b      	bls.n	8001c04 <printmsg_cl3+0x30>
 8001bec:	6823      	ldr	r3, [r4, #0]
	{
		while(!LL_USART_IsActiveFlag_TXE(USART6)){
 8001bee:	061a      	lsls	r2, r3, #24
 8001bf0:	d5fc      	bpl.n	8001bec <printmsg_cl3+0x18>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8001bf2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001bf6:	6063      	str	r3, [r4, #4]
	for(uint32_t i=0; i < strlen(msg); i++)
 8001bf8:	4630      	mov	r0, r6
 8001bfa:	f7fe faed 	bl	80001d8 <strlen>
 8001bfe:	197b      	adds	r3, r7, r5
 8001c00:	4298      	cmp	r0, r3
 8001c02:	d8f3      	bhi.n	8001bec <printmsg_cl3+0x18>
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001c04:	4a02      	ldr	r2, [pc, #8]	; (8001c10 <printmsg_cl3+0x3c>)
 8001c06:	6813      	ldr	r3, [r2, #0]
		}
		// while (USART_GetFlagStatus(USART6,USART_FLAG_TXE) != SET);
		LL_USART_TransmitData8(USART6,msg[i]);
	}

	while (!LL_USART_IsActiveFlag_TC(USART6)){
 8001c08:	065b      	lsls	r3, r3, #25
 8001c0a:	d5fc      	bpl.n	8001c06 <printmsg_cl3+0x32>
		;  // Wait again forever
	}

}
 8001c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40011400 	.word	0x40011400

08001c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c1a:	e003      	b.n	8001c24 <LoopCopyDataInit>

08001c1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c22:	3104      	adds	r1, #4

08001c24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c24:	480b      	ldr	r0, [pc, #44]	; (8001c54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c2c:	d3f6      	bcc.n	8001c1c <CopyDataInit>
  ldr  r2, =_sbss
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c30:	e002      	b.n	8001c38 <LoopFillZerobss>

08001c32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c34:	f842 3b04 	str.w	r3, [r2], #4

08001c38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c3c:	d3f9      	bcc.n	8001c32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c3e:	f7ff fcc9 	bl	80015d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c42:	f000 f811 	bl	8001c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c46:	f7ff fb63 	bl	8001310 <main>
  bx  lr    
 8001c4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c50:	08001d48 	.word	0x08001d48
  ldr  r0, =_sdata
 8001c54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c58:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001c5c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001c60:	200000d4 	.word	0x200000d4

08001c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC_IRQHandler>
	...

08001c68 <__libc_init_array>:
 8001c68:	b570      	push	{r4, r5, r6, lr}
 8001c6a:	4d0d      	ldr	r5, [pc, #52]	; (8001ca0 <__libc_init_array+0x38>)
 8001c6c:	4c0d      	ldr	r4, [pc, #52]	; (8001ca4 <__libc_init_array+0x3c>)
 8001c6e:	1b64      	subs	r4, r4, r5
 8001c70:	10a4      	asrs	r4, r4, #2
 8001c72:	2600      	movs	r6, #0
 8001c74:	42a6      	cmp	r6, r4
 8001c76:	d109      	bne.n	8001c8c <__libc_init_array+0x24>
 8001c78:	4d0b      	ldr	r5, [pc, #44]	; (8001ca8 <__libc_init_array+0x40>)
 8001c7a:	4c0c      	ldr	r4, [pc, #48]	; (8001cac <__libc_init_array+0x44>)
 8001c7c:	f000 f818 	bl	8001cb0 <_init>
 8001c80:	1b64      	subs	r4, r4, r5
 8001c82:	10a4      	asrs	r4, r4, #2
 8001c84:	2600      	movs	r6, #0
 8001c86:	42a6      	cmp	r6, r4
 8001c88:	d105      	bne.n	8001c96 <__libc_init_array+0x2e>
 8001c8a:	bd70      	pop	{r4, r5, r6, pc}
 8001c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c90:	4798      	blx	r3
 8001c92:	3601      	adds	r6, #1
 8001c94:	e7ee      	b.n	8001c74 <__libc_init_array+0xc>
 8001c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c9a:	4798      	blx	r3
 8001c9c:	3601      	adds	r6, #1
 8001c9e:	e7f2      	b.n	8001c86 <__libc_init_array+0x1e>
 8001ca0:	08001d40 	.word	0x08001d40
 8001ca4:	08001d40 	.word	0x08001d40
 8001ca8:	08001d40 	.word	0x08001d40
 8001cac:	08001d44 	.word	0x08001d44

08001cb0 <_init>:
 8001cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cb2:	bf00      	nop
 8001cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cb6:	bc08      	pop	{r3}
 8001cb8:	469e      	mov	lr, r3
 8001cba:	4770      	bx	lr

08001cbc <_fini>:
 8001cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cbe:	bf00      	nop
 8001cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cc2:	bc08      	pop	{r3}
 8001cc4:	469e      	mov	lr, r3
 8001cc6:	4770      	bx	lr
